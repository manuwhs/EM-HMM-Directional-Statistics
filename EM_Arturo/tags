!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	Library Examples/2.main_SamplesGen.py	/^A = np.array([[0.4, 0.1, 0.5],$/;"	v
A	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        A = np.array([[0.4, 0.1, 0.5],$/;"	v
A	Library Examples/5.main_CV_Watson.py	/^    A = params[1]$/;"	v
A	utils/create_HMM_from_EM_data.py	/^A = np.array([[0.4, 0.1, 0.5],$/;"	v
A_init	ECG mains/old/6.main_data1 (copy).py	/^        A_init = np.repeat(pi_init, I, axis = 0)$/;"	v
AdaBoostClassifier	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
AdaBoostClassifier	utils/system_modules.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
All_maxes	ECG mains/old/6.main_data2_noWatson.py	/^    All_maxes = []$/;"	v
Axes3D	libs/graph/graph_3D.py	/^from mpl_toolkits.mplot3d import Axes3D$/;"	i
AxesWidget	libs/graph/GUI/graph_GUI.py	/^from matplotlib.widgets import AxesWidget$/;"	i
B_init	ECG mains/old/6.main_data1 (copy).py	/^        B_init = theta$/;"	v
BaggingClassifier	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
BaggingClassifier	utils/system_modules.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
Basex	Library Examples/1.main_TryDistribution.py	/^Basex =  np.cos(Xalpha)$/;"	v
Basey	Library Examples/1.main_TryDistribution.py	/^Basey = np.sin(Xalpha)$/;"	v
Button	libs/graph/GUI/graph_GUI.py	/^from matplotlib.widgets import CheckButtons,Slider, Button, SpanSelector$/;"	i
Button2	libs/graph/GUI/graph_GUI.py	/^class Button2(AxesWidget):$/;"	c
C	ECG mains/old/6.main_data2_noWatson.py	/^    C = np.logspace(-3,3,10)$/;"	v
CDistribution	EM POO/CDistribution.py	/^class CDistribution ():$/;"	c
CDistribution	EM_POO/CDistribution.py	/^class CDistribution ():$/;"	c
CDistributionManager	EM POO/CDistribution.py	/^class CDistributionManager():$/;"	c
CEM	ECG mains/1.main_Arturo.py	/^import CEM as CEM $/;"	i
CEM	ECG mains/2.main_Manu.py	/^import CEM$/;"	i
CEM	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import CEM$/;"	i
CEM	EM POO/CEM.py	/^class CEM ():$/;"	c
CEM	EM_POO/CEM.py	/^class CEM ():$/;"	c
CEM	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import CEM as CEM $/;"	i
CEM	Library Examples/3.main_EM_Watson.py	/^import CEM as CEM $/;"	i
CEM	Library Examples/5.main_CV_Gaussian.py	/^import CEM$/;"	i
CEM	Library Examples/5.main_CV_Watson.py	/^import CEM$/;"	i
CGraph	libs/graph/graph_lib.py	/^class CGraph ():$/;"	c
CHMM	ECG mains/2.main_Manu.py	/^import CHMM$/;"	i
CHMM	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import CHMM$/;"	i
CHMM	EM POO/CHMM.py	/^class CHMM ():$/;"	c
CHMM	EM_POO/CHMM.py	/^class CHMM ():$/;"	c
CHMM	Library Examples/5.main_CV_Gaussian.py	/^import CHMM$/;"	i
CHMM	Library Examples/5.main_CV_Watson.py	/^import CHMM$/;"	i
CV_EM	ECG mains/2.main_Manu.py	/^CV_EM = 1          # To perform the CV of the EM$/;"	v
CV_EM	ECG mains/old/6.main_data1.py	/^CV_EM = 0$/;"	v
CV_EM	Library Examples/5.main_CV_Gaussian.py	/^CV_EM = 1          # To perform the CV of the EM$/;"	v
CV_EM	Library Examples/5.main_CV_Watson.py	/^CV_EM = 1          # To perform the CV of the EM$/;"	v
CV_HMM	ECG mains/2.main_Manu.py	/^CV_HMM = 0         # To perform the CV of the HMM$/;"	v
CV_HMM	ECG mains/old/6.main_data1.py	/^CV_HMM = 0$/;"	v
CV_HMM	Library Examples/5.main_CV_Gaussian.py	/^CV_HMM = 0         # To perform the CV of the HMM$/;"	v
CV_HMM	Library Examples/5.main_CV_Watson.py	/^CV_HMM = 0         # To perform the CV of the HMM$/;"	v
CV_LOO	ECG mains/1.main_Arturo.py	/^def CV_LOO(X_list,K_list,conditions,Watson_d):$/;"	f
CV_flag	ECG mains/old/6.main_data1.py	/^    CV_flag = 0$/;"	v
Cdist	ECG mains/1.main_Arturo.py	/^import CDistribution as Cdist$/;"	i
Cdist	ECG mains/2.main_Manu.py	/^import CDistribution as Cdist$/;"	i
Cdist	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import CDistribution as Cdist$/;"	i
Cdist	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import CDistribution as Cdist$/;"	i
Cdist	Library Examples/3.main_EM_Watson.py	/^import CDistribution as Cdist$/;"	i
Cdist	Library Examples/5.main_CV_Gaussian.py	/^import CDistribution as Cdist$/;"	i
Cdist	Library Examples/5.main_CV_Watson.py	/^import CDistribution as Cdist$/;"	i
Chains_list	Library Examples/2.main_SamplesGen.py	/^Chains_list = gf.draw_HMM_indexes(pi, A, Nchains, Nsamples)$/;"	v
Chains_list	Library Examples/5.main_CV_Watson.py	/^    Chains_list = pkl.load_pickle(folder_HMM +"HMM_labels.pkl",1)$/;"	v
Chains_list	utils/create_HMM_from_EM_data.py	/^Chains_list = gf.draw_HMM_indexes(pi, A, Nchains, Nsamples)$/;"	v
Chains_list2	Library Examples/2.main_SamplesGen.py	/^Chains_list2 = gf.draw_HMM_indexes(pi, A, Nchains, Nsamples)$/;"	v
Chains_list2	utils/create_HMM_from_EM_data.py	/^Chains_list2 = gf.draw_HMM_indexes(pi, A, Nchains, Nsamples)$/;"	v
CheckButtons	libs/graph/GUI/graph_GUI.py	/^from matplotlib.widgets import CheckButtons,Slider, Button, SpanSelector$/;"	i
ClickPlot	libs/graph/GUI/GUI_ex1.py	/^class ClickPlot:$/;"	c
ColCon	libs/basicMathlib.py	/^import matplotlib.colors as ColCon$/;"	i
ColCon	libs/graph/specific/graph_tsa.py	/^import matplotlib.colors as ColCon$/;"	i
ColCon	libs/utilities_lib.py	/^import matplotlib.colors as ColCon$/;"	i
D	ECG mains/2.main_Manu.py	/^    D = X[0,0].shape[1]$/;"	v
D	ECG mains/old/caca.py	/^D = 10$/;"	v
DecisionTreeClassifier	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.tree import DecisionTreeClassifier$/;"	i
DecisionTreeClassifier	utils/system_modules.py	/^from sklearn.tree import DecisionTreeClassifier$/;"	i
EM	EM/EM_lib.py	/^def EM(data, distributionsManager, clusters_relation = "independent",$/;"	f
EM	vonMises/em_module.py	/^def EM(X,K, maxit = 100, verbose = True):$/;"	f
EM	vonMises/main.py	/^from em_module import EM,vonCV_EM$/;"	i
EM_evolution	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^EM_evolution = 1          # To perform the CV of the EM$/;"	v
EM_evolution	ECG mains/old/6.main_data1.py	/^EM_evolution = 0$/;"	v
EM_flag	ECG mains/old/6.main_data1 (copy).py	/^EM_flag = 0$/;"	v
EM_flag	ECG mains/old/6.main_data1.py	/^EM_flag = 0$/;"	v
EM_flag	ECG mains/old/6.main_data2_noWatson.py	/^EM_flag = 1$/;"	v
EM_flag	ECG mains/old/7.main_system.py	/^EM_flag = 1$/;"	v
EM_params	ECG mains/old/6.main_data1 (copy).py	/^        EM_params = Ks_params[k]$/;"	v
EMdecode	Old Code/EM_libfunc_previous.py	/^def EMdecode(Xdata, theta, pimix):$/;"	f
EMl	ECG mains/1.main_Arturo.py	/^import EM_lib as EMl$/;"	i
EMl	ECG mains/2.main_Manu.py	/^import EM_lib as EMl$/;"	i
EMl	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import EM_lib as EMl$/;"	i
EMl	ECG mains/old/6.main_data1 (copy).py	/^import EM_lib as EMl$/;"	i
EMl	ECG mains/old/6.main_data1.py	/^import EM_lib as EMl$/;"	i
EMl	ECG mains/old/6.main_data2.py	/^import EM_lib as EMl$/;"	i
EMl	ECG mains/old/6.main_data2_noWatson.py	/^import EM_lib as EMl$/;"	i
EMl	ECG mains/old/7.main_system.py	/^import EM_lib as EMl$/;"	i
EMl	EM POO/CDistribution.py	/^import EM_lib as EMl$/;"	i
EMl	EM POO/CEM.py	/^import EM_lib as EMl$/;"	i
EMl	EM_POO/CDistribution.py	/^import EM_lib as EMl$/;"	i
EMl	EM_POO/CEM.py	/^import EM_lib as EMl$/;"	i
EMl	EM_POO/CHMM.py	/^import EM_lib as EMl$/;"	i
EMl	Library Examples/2.main_SamplesGen.py	/^import EM_lib as EMl$/;"	i
EMl	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import EM_lib as EMl$/;"	i
EMl	Library Examples/3.main_EM_Watson.py	/^import EM_lib as EMl$/;"	i
EMl	Library Examples/5.main_CV_Gaussian.py	/^import EM_lib as EMl$/;"	i
EMl	Library Examples/5.main_CV_Watson.py	/^import EM_lib as EMl$/;"	i
EMl	modules/EMmodule.py	/^import EM_lib as EMl$/;"	i
EMl	utils/create_HMM_from_EM_data.py	/^import EM_lib as EMl$/;"	i
EMl	utils/data_preprocessing.py	/^import EM_lib as EMl$/;"	i
EMl	utils/system_func.py	/^import EM_lib as EMl$/;"	i
EMl	utils/system_modules.py	/^import EM_lib as EMl$/;"	i
EMlf	ECG mains/1.main_Arturo.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	ECG mains/old/6.main_data1 (copy).py	/^import EM_libfunc as EMlf$/;"	i
EMlf	ECG mains/old/6.main_data1.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	ECG mains/old/6.main_data2.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	ECG mains/old/6.main_data2_noWatson.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	ECG mains/old/7.main_system.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	EM POO/CDistribution.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	EM POO/CEM.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	EM/EM_lib.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	EM_POO/CDistribution.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	EM_POO/CEM.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	Library Examples/3.main_EM_Watson.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	modules/EMmodule.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	utils/data_preprocessing.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	utils/system_func.py	/^import EM_libfunc as EMlf$/;"	i
EMlf	utils/system_modules.py	/^import EM_libfunc as EMlf$/;"	i
EMobj	modules/EMmodule.py	/^class EMobj:$/;"	c
ExpMovingAverage	libs/graph/GUI/graph_GUI_ad (copy).py	/^def ExpMovingAverage(values, window):$/;"	f
ExtraTreesClassifier	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
ExtraTreesClassifier	utils/system_modules.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
FormatStrFormatter	libs/graph/graph_3D.py	/^from matplotlib.ticker import LinearLocator, FormatStrFormatter$/;"	i
FuncFormatter	libs/graph/graph_axis.py	/^from matplotlib.ticker import FuncFormatter$/;"	i
Gad	EM POO/CDistribution.py	/^import Gaussian_distribution as Gad$/;"	i
Gad	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import Gaussian_distribution as Gad$/;"	i
Gad	Library Examples/5.main_CV_Gaussian.py	/^import Gaussian_distribution as Gad$/;"	i
Gad	libs/specific_plotting_func.py	/^import Gaussian_distribution as Gad$/;"	i
Gae	EM POO/CDistribution.py	/^import Gaussian_estimators as Gae$/;"	i
Gae	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import Gaussian_estimators as Gae$/;"	i
Gae	Library Examples/5.main_CV_Gaussian.py	/^import Gaussian_estimators as Gae$/;"	i
Gae	libs/specific_plotting_func.py	/^import Gaussian_estimators as Gae$/;"	i
GaussianNB	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.naive_bayes import GaussianNB$/;"	i
GaussianNB	utils/system_modules.py	/^from sklearn.naive_bayes import GaussianNB$/;"	i
Gaussian_K_pdf_log	Distributions/Gaussian/Gaussian_distribution.py	/^def Gaussian_K_pdf_log (X, theta, Cs_log = None, parameters = None):$/;"	f
Gaussian_d	ECG mains/2.main_Manu.py	/^Gaussian_d = Cdist.CDistribution(name = "Gaussian");$/;"	v
Gaussian_d	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^Gaussian_d = Cdist.CDistribution(name = "Gaussian");$/;"	v
Gaussian_d	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    Gaussian_d = Cdist.CDistribution(name = "Gaussian");$/;"	v
Gaussian_d	Library Examples/3.main_EM_Watson.py	/^    Gaussian_d = Cdist.CDistribution(name = "Gaussian");$/;"	v
Gaussian_d	Library Examples/5.main_CV_Gaussian.py	/^    Gaussian_d = Cdist.CDistribution(name = "Gaussian");$/;"	v
Gaussian_d	Library Examples/5.main_CV_Gaussian.py	/^Gaussian_d = Cdist.CDistribution(name = "Gaussian");$/;"	v
Gaussian_d	Library Examples/5.main_CV_Watson.py	/^Gaussian_d = Cdist.CDistribution(name = "Gaussian");$/;"	v
Gaussian_pdf_log	Distributions/Gaussian/Gaussian_distribution.py	/^def Gaussian_pdf_log (X, theta_k, Cs_log = None, diagonal = False):$/;"	f
GridSearch	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
GridSearch	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
GridSearchCV	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.grid_search import GridSearchCV$/;"	i
GridSearchCV	utils/system_modules.py	/^from sklearn.grid_search import GridSearchCV$/;"	i
HMM	EM/HMM_lib.py	/^def HMM(data, distribution,$/;"	f
HMM	Old Code/HMM_lib (copy).py	/^def HMM(I,data,delta,R):$/;"	f
HMM	Old Code/HMM_lib before.py	/^def HMM(I,data,delta,R):$/;"	f
HMM_evolution	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^HMM_evolution = 0         # To perform the CV of the HMM$/;"	v
HMM_flag	ECG mains/old/6.main_data1 (copy).py	/^HMM_flag = 0$/;"	v
HMM_flag	ECG mains/old/6.main_data1.py	/^HMM_flag = 0$/;"	v
HMM_flag	ECG mains/old/6.main_data2_noWatson.py	/^HMM_flag = 0$/;"	v
HMM_list	ECG mains/2.main_Manu.py	/^    HMM_list = list(Xdata)$/;"	v
HMM_list	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    HMM_list = list(Xdata)$/;"	v
HMM_list	Library Examples/2.main_SamplesGen.py	/^HMM_list = gf.draw_HMM_samples(Chains_list, Xdata)$/;"	v
HMM_list	Library Examples/3.main_EM_Watson.py	/^    HMM_list = pkl.load_pickle(folder_HMM +"HMM_datapoints.pkl",1)$/;"	v
HMM_list	Library Examples/5.main_CV_Watson.py	/^    HMM_list = pkl.load_pickle(folder_HMM +"HMM_datapoints.pkl",1)$/;"	v
HMM_list	utils/create_HMM_from_EM_data.py	/^HMM_list = gf.draw_HMM_samples(Chains_list, Xdata)$/;"	v
HMM_list2	Library Examples/2.main_SamplesGen.py	/^HMM_list2 = gf.draw_HMM_samples(Chains_list2, Xdata)$/;"	v
HMM_list2	utils/create_HMM_from_EM_data.py	/^HMM_list2 = gf.draw_HMM_samples(Chains_list2, Xdata2)$/;"	v
HMMl	Distributions/Watson/Watson_estimators2.py	/^import HMM_libfunc2 as HMMl$/;"	i
HMMl	ECG mains/old/6.main_data1 (copy).py	/^import HMM_lib as HMMl$/;"	i
HMMl	ECG mains/old/6.main_data1.py	/^import HMM_lib as HMMl$/;"	i
HMMl	ECG mains/old/6.main_data2.py	/^import HMM_lib as HMMl$/;"	i
HMMl	ECG mains/old/6.main_data2_noWatson.py	/^import HMM_lib as HMMl$/;"	i
HMMl	ECG mains/old/7.main_system.py	/^import HMM_lib as HMMl$/;"	i
HMMl	EM POO/CHMM.py	/^import HMM_lib as HMMl$/;"	i
HMMl	EM_POO/CHMM.py	/^import HMM_lib as HMMl$/;"	i
HMMl	Old Code/Watson_estimators (copy).py	/^import HMM_libfunc2 as HMMl$/;"	i
HMMl	utils/data_preprocessing.py	/^import HMM_lib as HMMl$/;"	i
HMMl	utils/system_func.py	/^import HMM_lib as HMMl$/;"	i
HMMl	utils/system_modules.py	/^import HMM_lib as HMMl$/;"	i
HMMlf	ECG mains/2.main_Manu.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	ECG mains/old/6.main_data1 (copy).py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	ECG mains/old/6.main_data1.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	ECG mains/old/6.main_data2.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	ECG mains/old/6.main_data2_noWatson.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	ECG mains/old/7.main_system.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	ECG mains/old/caca.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	EM POO/CEM.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	EM POO/CHMM.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	EM/EM_lib.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	EM/HMM_lib.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	EM/decoder_lib.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	EM_POO/CHMM.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	Library Examples/5.main_CV_Gaussian.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	Library Examples/5.main_CV_Watson.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	Old Code/HMM_lib (copy).py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	Old Code/HMM_lib before.py	/^import HMM_libfunc as HMMlf$/;"	i
HMMlf	utils/data_preprocessing.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	utils/system_func.py	/^import HMM_libfunc2 as HMMlf$/;"	i
HMMlf	utils/system_modules.py	/^import HMM_libfunc2 as HMMlf$/;"	i
Heiken_Ashi_graph	libs/graph/graph_advanced.py	/^def Heiken_Ashi_graph(self, data, labels = [], nf = 1):$/;"	f
Heiken_Ashi_graph	libs/graph/graph_lib.py	/^    Heiken_Ashi_graph = grad.Heiken_Ashi_graph$/;"	v	class:CGraph
I	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    I = 20  # 10,15,20,25,30] # range(1,8) # 3,4,5,6,10,10,12,15$/;"	v
I	ECG mains/old/6.main_data1 (copy).py	/^        I = pimix.size$/;"	v
I	ECG mains/old/6.main_data2_noWatson.py	/^            I = pi_init.size$/;"	v
I	ECG mains/old/6.main_data2_noWatson.py	/^    I = 2$/;"	v
IPython	vonMises/data/outputs/visualization.py	/^import IPython$/;"	i
IPython	vonMises/main.py	/^    import IPython$/;"	i
InvTransSamp	Distributions/Watson/sampler_lib.py	/^def InvTransSamp(data, n_bins, n_samples):$/;"	f
InvTransSampGrid	Distributions/Watson/sampler_lib.py	/^def InvTransSampGrid(pdf_Values, pdf_Grid, Nsam):$/;"	f
Is_params	ECG mains/old/6.main_data1 (copy).py	/^    Is_params = []$/;"	v
Is_params	ECG mains/old/6.main_data1.py	/^    Is_params = sm.get_clusters_labels_HMM(Nclasses, X_data_ave, range(Nclasses), Ks_params = Ks_params_HMM,$/;"	v
Is_params	ECG mains/old/6.main_data2_noWatson.py	/^    Is_params = []$/;"	v
K	ECG mains/old/6.main_data1 (copy).py	/^    K  =  5$/;"	v
K	ECG mains/old/6.main_data2_noWatson.py	/^    K  =  5$/;"	v
K	ECG mains/old/7.main_system.py	/^    K  =  6$/;"	v
K	ECG mains/old/caca.py	/^K = 3$/;"	v
K	Library Examples/2.main_SamplesGen.py	/^K = 3$/;"	v
K	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    K = len(myDManager.clusterk_to_Dname.keys())$/;"	v
K	Library Examples/3.main_EM_Watson.py	/^    K = 3$/;"	v
K	Library Examples/3.main_EM_Watson.py	/^    K = len(myDManager.clusterk_to_Dname.keys())$/;"	v
K	utils/create_HMM_from_EM_data.py	/^K = 3$/;"	v
KNeighborsClassifier	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.neighbors import KNeighborsClassifier$/;"	i
KNeighborsClassifier	utils/system_modules.py	/^from sklearn.neighbors import KNeighborsClassifier$/;"	i
K_G	ECG mains/2.main_Manu.py	/^            K_G = 1       # Number of clusters for the Gaussian Distribution$/;"	v
K_G	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^K_G = 0     # Number of clusters for the Gaussian Distribution$/;"	v
K_G	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    K_G = 1      # Number of clusters for the Gaussian Distribution$/;"	v
K_G	Library Examples/3.main_EM_Watson.py	/^    K_G = 0       # Number of clusters for the Gaussian Distribution$/;"	v
K_G	Library Examples/5.main_CV_Gaussian.py	/^            K_G = K       # Number of clusters for the Gaussian Distribution$/;"	v
K_G	Library Examples/5.main_CV_Watson.py	/^            K_G = 0       # Number of clusters for the Gaussian Distribution$/;"	v
K_W	ECG mains/2.main_Manu.py	/^            K_W = K$/;"	v
K_W	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^K_W = 5$/;"	v
K_W	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    K_W = 1$/;"	v
K_W	Library Examples/3.main_EM_Watson.py	/^    K_W = 3$/;"	v
K_W	Library Examples/5.main_CV_Gaussian.py	/^            K_W = 0$/;"	v
K_W	Library Examples/5.main_CV_Watson.py	/^            K_W = K$/;"	v
K_vMF	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^K_vMF = 0$/;"	v
K_vMF	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    K_vMF = 2$/;"	v
KernelDensity	libs/basicMathlib.py	/^from sklearn.neighbors import KernelDensity$/;"	i
Klusters	ECG mains/2.main_Manu.py	/^    Klusters =  [1,5,10,15,20,25,30,35,40]  # range(1,8) # 3,4,5,6,10,10,12,15$/;"	v
Klusters	ECG mains/2.main_Manu.py	/^    Klusters = [1,5,10,15,20,25,30] # range(1,8) # 3,4,5,6,10,10,12,15$/;"	v
Klusters	ECG mains/old/6.main_data1.py	/^    Klusters = [1,2,3,4,5,6,7,8,9]$/;"	v
Klusters	ECG mains/old/6.main_data1.py	/^    Klusters = [1,2,3,4,5,6,7,9,10,12,14,18,20,22,24] # ,13,15,17,20,25$/;"	v
Klusters	Library Examples/5.main_CV_Gaussian.py	/^    Klusters = [1,2,3,4,5] # range(1,8) # 3,4,5,6,10,10,12,15$/;"	v
Klusters	Library Examples/5.main_CV_Watson.py	/^    Klusters = [1,2,3,4,5] # range(1,8) # 3,4,5,6,10,10,12,15$/;"	v
Ks_params	ECG mains/old/6.main_data1 (copy).py	/^    Ks_params = []  $/;"	v
Ks_params	ECG mains/old/6.main_data1.py	/^    Ks_params = cosas[2][n_cluster_opt]$/;"	v
Ks_params	ECG mains/old/6.main_data1.py	/^    Ks_params = good_clusters_EM$/;"	v
Ks_params	ECG mains/old/6.main_data1.py	/^    Ks_params = sm.get_clusters_labels_EM(Nclasses, X_train = X_data_ave, y_train = range(Nclasses), $/;"	v
Ks_params	ECG mains/old/7.main_system.py	/^    Ks_params = []$/;"	v
Ks_params_HMM	ECG mains/old/6.main_data1.py	/^    Ks_params_HMM = None$/;"	v
LDA	ECG mains/old/6.main_data2_noWatson.py	/^    from sklearn.lda import LDA$/;"	i
LDA	utils/system_modules.py	/^from sklearn.lda import LDA$/;"	i
LDA_cl	ECG mains/old/6.main_data2_noWatson.py	/^LDA_cl = 1$/;"	v
LR_cl	ECG mains/old/6.main_data2_noWatson.py	/^LR_cl = 1$/;"	v
Likelihoods	ECG mains/old/6.main_data1 (copy).py	/^    Likelihoods = [] # np.zeros(1000,(len(Ks_params)))$/;"	v
Likelihoods	ECG mains/old/6.main_data1 (copy).py	/^    Likelihoods = []$/;"	v
Likelihoods	ECG mains/old/6.main_data1 (copy).py	/^    Likelihoods = np.array(Likelihoods)$/;"	v
Likelihoods	ECG mains/old/6.main_data2_noWatson.py	/^    Likelihoods = dp.get_likelihoods_HMM(X_test, Is_params)$/;"	v
Likelihoods	ECG mains/old/6.main_data2_noWatson.py	/^    Likelihoods = dp.get_likelihoods_HMM(X_train, Is_params)$/;"	v
Likelihoods	ECG mains/old/7.main_system.py	/^    Likelihoods = dp.get_likelihoods_EM(X_test, Ks_params)$/;"	v
Likelihoods	ECG mains/old/7.main_system.py	/^    Likelihoods = dp.get_likelihoods_EM(X_train, Ks_params)$/;"	v
LinearLocator	libs/graph/graph_3D.py	/^from matplotlib.ticker import LinearLocator, FormatStrFormatter$/;"	i
LinearSVC	utils/system_modules.py	/^from sklearn.svm import SVC,LinearSVC$/;"	i
LogisticRegression	ECG mains/old/6.main_data2_noWatson.py	/^    from sklearn.linear_model import LogisticRegression$/;"	i
LogisticRegression	utils/system_modules.py	/^from sklearn.linear_model import LogisticRegression$/;"	i
MAPViter_decoder	EM/decoder_lib.py	/^def MAPViter_decoder(data, A, B, pi):$/;"	f
MLViter_decoder	EM/decoder_lib.py	/^def MLViter_decoder(data, A, B, pi):$/;"	f
MLestimator	vonMises/vonMisesFisher.py	/^def MLestimator(X):$/;"	f
Module	ECG mains/old/main2.py	/^    Module = Module.reshape(Nsamples,1)$/;"	v
Module	ECG mains/old/main2.py	/^    Module = np.sqrt(np.sum(np.power(Xdata,2),1))$/;"	v
N	Distributions/Watson/Watson_samplingMartin.py	/^N=1000.0$/;"	v
N	Library Examples/2.main_SamplesGen.py	/^    N = 1000$/;"	v
N	Library Examples/2.main_SamplesGen.py	/^N = 10000$/;"	v
N	utils/create_HMM_from_EM_data.py	/^N = 10000$/;"	v
N1	Library Examples/5.main_CV_Gaussian.py	/^    N1 = 200$/;"	v
N2	Library Examples/5.main_CV_Gaussian.py	/^    N2 = 400$/;"	v
N3	Library Examples/5.main_CV_Gaussian.py	/^    N3 = 600$/;"	v
NCVs	ECG mains/2.main_Manu.py	/^    NCVs = 1    # Number of times we do the crossvalidation$/;"	v
NCVs	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    NCVs = 1    # Number of times we do the crossvalidation$/;"	v
NCVs	Library Examples/5.main_CV_Gaussian.py	/^    NCVs = 1    # Number of times we do the crossvalidation$/;"	v
NCVs	Library Examples/5.main_CV_Watson.py	/^    NCVs = 1    # Number of times we do the crossvalidation$/;"	v
N_init_CV	ECG mains/old/6.main_data1.py	/^    N_init_CV = 50$/;"	v
Nchains	Library Examples/2.main_SamplesGen.py	/^Nchains = 20  # Number of chains$/;"	v
Nchains	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        Nchains = 10  # Number of chains$/;"	v
Nchains	utils/create_HMM_from_EM_data.py	/^Nchains = 20  # Number of chains$/;"	v
Nchannels_chosen	ECG mains/old/7.main_system.py	/^Nchannels_chosen = 5  # We select this number of channels$/;"	v
Nclasses	ECG mains/old/6.main_data1 (copy).py	/^    Nclasses = len(label_classes)$/;"	v
Nclasses	ECG mains/old/6.main_data1.py	/^    Nclasses = len(X_All_labels)$/;"	v
Nclasses	ECG mains/old/6.main_data2_noWatson.py	/^    Nclasses = len(X_All_labels)$/;"	v
Nclasses	ECG mains/old/7.main_system.py	/^Nclasses = len(X_All_labels)$/;"	v
Ndim	ECG mains/old/main2.py	/^    Ndim = 2$/;"	v
Ndim	ECG mains/old/main2.py	/^    Ndim = 3$/;"	v
Ndim	ECG mains/old/main2.py	/^Ndim = 3$/;"	v
Ndim	Library Examples/1.main_TryDistribution.py	/^Ndim = 2  # Number of dimensions of our generated data$/;"	v
Newton_kappa	Distributions/Watson/Watson_estimators2.py	/^def Newton_kappa(kappa0,Ndim,r, Ninter = 10):$/;"	f
Newton_kappa	Old Code/Watson_estimators (copy).py	/^def Newton_kappa(kappa0,Ndim,r, Ninter = 10):$/;"	f
Newton_kappa_log	Distributions/Watson/Watson_estimators.py	/^def Newton_kappa_log(kappa0,Ndim,r, Niter = None):$/;"	f
Newton_kappa_log	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^def Newton_kappa_log(kappa0,D,R, Niter = None):$/;"	f
Nfolds	ECG mains/2.main_Manu.py	/^    Nfolds =  Npeople  # Number of folds of each crossvalidation$/;"	v
Nfolds	ECG mains/2.main_Manu.py	/^    Nfolds = Npeople  # Number of folds of each crossvalidation$/;"	v
Nfolds	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    Nfolds =  Npeople  # Number of folds of each crossvalidation$/;"	v
Nfolds	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    Nfolds = Npeople  # Number of folds of each crossvalidation$/;"	v
Nfolds	Library Examples/5.main_CV_Gaussian.py	/^    Nfolds = 2  # Number of folds of each crossvalidation$/;"	v
Nfolds	Library Examples/5.main_CV_Watson.py	/^    Nfolds = 10  # Number of folds of each crossvalidation$/;"	v
Ninit	ECG mains/2.main_Manu.py	/^    Ninit = 5$/;"	v
Ninit	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    Ninit = 1$/;"	v
Ninit	ECG mains/old/6.main_data1 (copy).py	/^    Ninit = 20$/;"	v
Ninit	ECG mains/old/6.main_data2_noWatson.py	/^    Ninit = 50$/;"	v
Ninit	ECG mains/old/7.main_system.py	/^    Ninit = 10$/;"	v
Ninit	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    Ninit = 10$/;"	v
Ninit	Library Examples/3.main_EM_Watson.py	/^    Ninit = 5$/;"	v
Ninit	Library Examples/5.main_CV_Gaussian.py	/^    Ninit = 5$/;"	v
Ninit	Library Examples/5.main_CV_Watson.py	/^    Ninit = 10$/;"	v
Nit	ECG mains/old/6.main_data1 (copy).py	/^    Nit = 1$/;"	v
Nit	ECG mains/old/6.main_data2_noWatson.py	/^    Nit = 1$/;"	v
Nsa	Library Examples/1.main_TryDistribution.py	/^    Nsa = 100  # Number of samples we will draw$/;"	v
Nsa	Library Examples/1.main_TryDistribution.py	/^Nsa = 1000  # Number of samples we will draw for the grid$/;"	v
Nsa	utils/create_HMM_from_EM_data.py	/^Nsa = Xdata[0].shape[1]$/;"	v
Nsam	ECG mains/old/caca.py	/^Nsam = 100$/;"	v
Nsamples	ECG mains/old/main2.py	/^    Nsamples = 100$/;"	v
Nsamples	ECG mains/old/main2.py	/^    Nsamples = 1000$/;"	v
Nsamples	Library Examples/2.main_SamplesGen.py	/^Nsamples = 100 + np.random.rand(Nchains) * 100  # Number of samples per chain$/;"	v
Nsamples	Library Examples/2.main_SamplesGen.py	/^Nsamples = Nsamples.astype(int)  # Number of samples per chain$/;"	v
Nsamples	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        Nsamples = 50 + np.random.rand(Nchains) * 10  # Number of samples per chain$/;"	v
Nsamples	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        Nsamples = Nsamples.astype(int)  # Number of samples per chain$/;"	v
Nsamples	utils/create_HMM_from_EM_data.py	/^Nsamples = 50 + np.random.rand(Nchains) * 20  # Number of samples per chain$/;"	v
Nsamples	utils/create_HMM_from_EM_data.py	/^Nsamples = Nsamples.astype(int)  # Number of samples per chain$/;"	v
Nsamples_train	ECG mains/2.main_Manu.py	/^                Nsamples_train = np.sum(len(x) for x in Xdata_train_HMM_list)$/;"	v
Nsamples_val	ECG mains/2.main_Manu.py	/^                Nsamples_val = np.sum(len(x) for x in Xdata_val_HMM_list)$/;"	v
Nsampling	Library Examples/1.main_TryDistribution.py	/^    Nsampling = 1000$/;"	v
Nsampling	Library Examples/1.main_TryDistribution.py	/^Nsampling = 1000 # Number of samples we draw from the distribution$/;"	v
Ntrials	ECG mains/old/6.main_data1 (copy).py	/^        Ntrials = np.min([Ntrials,max_trials])$/;"	v
PCA	libs/basicMathlib.py	/^from sklearn.decomposition import PCA    $/;"	i
PCA	utils/system_modules.py	/^from sklearn.decomposition import PCA$/;"	i
QDA	utils/system_modules.py	/^from sklearn.qda import QDA$/;"	i
R	ECG mains/2.main_Manu.py	/^    R = 15$/;"	v
R	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    R = 15$/;"	v
RandWatson	Distributions/Watson/Watson_samplingMartin.py	/^RandWatson = randWatson(N, mu, k)$/;"	v
RandWatson	Library Examples/1.main_TryDistribution.py	/^    RandWatson = Was.randWatson(Nsampling, mu, kappa)$/;"	v
RandWatson	Library Examples/2.main_SamplesGen.py	/^    RandWatson = Was.randWatson(N, mu, kappa)$/;"	v
RandomForestClassifier	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
RandomForestClassifier	utils/system_modules.py	/^from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,BaggingClassifier,AdaBoostClassifier$/;"	i
Rectangle	libs/graph/graph_advanced.py	/^from matplotlib.patches import Rectangle$/;"	i
SVC	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.svm import SVC$/;"	i
SVC	utils/system_modules.py	/^from sklearn.svm import SVC,LinearSVC$/;"	i
SVM_cl	ECG mains/old/6.main_data2_noWatson.py	/^SVM_cl = 1$/;"	v
SbS_MAP_dec	EM/decoder_lib.py	/^def SbS_MAP_dec(Y,gamma,T):$/;"	f
SbS_decoder	EM/decoder_lib.py	/^def SbS_decoder(data, A, B, pi):$/;"	f
Slider	libs/graph/GUI/graph_GUI.py	/^from matplotlib.widgets import CheckButtons,Slider, Button, SpanSelector$/;"	i
SpanSelector	libs/graph/GUI/graph_GUI.py	/^from matplotlib.widgets import CheckButtons,Slider, Button, SpanSelector$/;"	i
StratifiedKFold	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.cross_validation import StratifiedKFold$/;"	i
StratifiedKFold	utils/system_modules.py	/^from sklearn.cross_validation import StratifiedKFold$/;"	i
T	ECG mains/2.main_Manu.py	/^    T = 20$/;"	v
T	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    T = 20$/;"	v
T	ECG mains/old/6.main_data1 (copy).py	/^    T  = 50$/;"	v
T	ECG mains/old/7.main_system.py	/^    T  = 50$/;"	v
T	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    T = 60$/;"	v
T	Library Examples/3.main_EM_Watson.py	/^    T = 60$/;"	v
T	Library Examples/5.main_CV_Gaussian.py	/^    T = 20$/;"	v
T	Library Examples/5.main_CV_Watson.py	/^    T = 20$/;"	v
To	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
To	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
Tree_cl	ECG mains/old/6.main_data2_noWatson.py	/^Tree_cl = 0$/;"	v
Velero_graph	libs/graph/graph_advanced.py	/^def Velero_graph(self, data, $/;"	f
Velero_graph	libs/graph/graph_lib.py	/^    Velero_graph = grad.Velero_graph$/;"	v	class:CGraph
Wad	Distributions/Gaussian/Gaussian_distribution.py	/^import Watson_distribution as Wad$/;"	i
Wad	Distributions/Gaussian/Gaussian_estimators.py	/^import Watson_distribution as Wad$/;"	i
Wad	Distributions/Watson/Watson_distribution.py	/^import Watson_distribution as Wad$/;"	i
Wad	Distributions/Watson/Watson_estimators.py	/^import Watson_distribution as Wad$/;"	i
Wad	Distributions/Watson/Watson_estimators2.py	/^import Watson_distribution as Wad$/;"	i
Wad	Distributions/Watson/Watson_sampling.py	/^import Watson_distribution as Wad$/;"	i
Wad	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import Watson_distribution as Wad$/;"	i
Wad	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/1.main_Arturo.py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/2.main_Manu.py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/old/6.main_data1 (copy).py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/old/6.main_data1.py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/old/6.main_data2.py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/old/6.main_data2_noWatson.py	/^import Watson_distribution as Wad$/;"	i
Wad	ECG mains/old/7.main_system.py	/^import Watson_distribution as Wad$/;"	i
Wad	EM POO/CDistribution.py	/^import Watson_distribution as Wad$/;"	i
Wad	EM/decoder_lib.py	/^import Watson_distribution as Wad$/;"	i
Wad	EM_POO/CDistribution.py	/^import Watson_distribution as Wad$/;"	i
Wad	EM_POO/CEM.py	/^import Watson_distribution as Wad$/;"	i
Wad	Library Examples/1.main_TryDistribution.py	/^import Watson_distribution as Wad$/;"	i
Wad	Library Examples/2.main_SamplesGen.py	/^import Watson_distribution as Wad$/;"	i
Wad	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import Watson_distribution as Wad$/;"	i
Wad	Library Examples/3.main_EM_Watson.py	/^import Watson_distribution as Wad$/;"	i
Wad	Library Examples/5.main_CV_Gaussian.py	/^import Watson_distribution as Wad$/;"	i
Wad	Library Examples/5.main_CV_Watson.py	/^import Watson_distribution as Wad$/;"	i
Wad	Old Code/HMM_libfunc2_old.py	/^import Watson_distribution as Wad$/;"	i
Wad	libs/specific_plotting_func.py	/^import Watson_distribution as Wad$/;"	i
Wad	utils/create_HMM_from_EM_data.py	/^import Watson_distribution as Wad$/;"	i
Wad	utils/data_preprocessing.py	/^import Watson_distribution as Wad$/;"	i
Wad	utils/system_func.py	/^import Watson_distribution as Wad$/;"	i
Wad	utils/system_modules.py	/^import Watson_distribution as Wad$/;"	i
Wae	Distributions/Gaussian/Gaussian_distribution.py	/^import Watson_estimators as Wae$/;"	i
Wae	Distributions/Gaussian/Gaussian_estimators.py	/^import Watson_estimators as Wae$/;"	i
Wae	Distributions/Watson/Watson_distribution.py	/^import Watson_estimators as Wae$/;"	i
Wae	Distributions/Watson/Watson_estimators.py	/^import Watson_estimators as Wae$/;"	i
Wae	Distributions/Watson/Watson_estimators2.py	/^import Watson_estimators as Wae$/;"	i
Wae	Distributions/Watson/Watson_sampling.py	/^import Watson_estimators as Wae$/;"	i
Wae	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import Watson_estimators as Wae$/;"	i
Wae	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/1.main_Arturo.py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/2.main_Manu.py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/old/6.main_data1 (copy).py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/old/6.main_data1.py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/old/6.main_data2.py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/old/6.main_data2_noWatson.py	/^import Watson_estimators as Wae$/;"	i
Wae	ECG mains/old/7.main_system.py	/^import Watson_estimators as Wae$/;"	i
Wae	EM POO/CDistribution.py	/^import Watson_estimators as Wae$/;"	i
Wae	EM/decoder_lib.py	/^import Watson_estimators as Wae$/;"	i
Wae	EM_POO/CDistribution.py	/^import Watson_estimators as Wae$/;"	i
Wae	EM_POO/CEM.py	/^import Watson_estimators as Wae$/;"	i
Wae	Library Examples/1.main_TryDistribution.py	/^import Watson_estimators as Wae$/;"	i
Wae	Library Examples/2.main_SamplesGen.py	/^import Watson_estimators as Wae$/;"	i
Wae	Library Examples/3.main_EM_Watson.py	/^import Watson_estimators as Wae$/;"	i
Wae	Library Examples/5.main_CV_Gaussian.py	/^import Watson_estimators as Wae$/;"	i
Wae	Library Examples/5.main_CV_Watson.py	/^import Watson_estimators as Wae$/;"	i
Wae	Old Code/HMM_libfunc2_old.py	/^import Watson_estimators as Wae$/;"	i
Wae	utils/create_HMM_from_EM_data.py	/^import Watson_estimators as Wae$/;"	i
Wae	utils/data_preprocessing.py	/^import Watson_estimators as Wae$/;"	i
Wae	utils/system_func.py	/^import Watson_estimators as Wae$/;"	i
Wae	utils/system_modules.py	/^import Watson_estimators as Wae$/;"	i
Was	Distributions/Gaussian/Gaussian_distribution.py	/^import Watson_sampling as Was$/;"	i
Was	Distributions/Gaussian/Gaussian_estimators.py	/^import Watson_sampling as Was$/;"	i
Was	Distributions/Watson/Watson_distribution.py	/^import Watson_sampling as Was$/;"	i
Was	Distributions/Watson/Watson_estimators.py	/^import Watson_sampling as Was$/;"	i
Was	Distributions/Watson/Watson_estimators2.py	/^import Watson_sampling as Was$/;"	i
Was	Distributions/Watson/Watson_sampling.py	/^import Watson_sampling as Was$/;"	i
Was	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import Watson_sampling as Was$/;"	i
Was	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import Watson_sampling as Was$/;"	i
Was	ECG mains/1.main_Arturo.py	/^import Watson_sampling as Was$/;"	i
Was	ECG mains/old/6.main_data1 (copy).py	/^import Watson_sampling as Was$/;"	i
Was	ECG mains/old/6.main_data1.py	/^import Watson_sampling as Was$/;"	i
Was	ECG mains/old/6.main_data2.py	/^import Watson_sampling as Was$/;"	i
Was	ECG mains/old/6.main_data2_noWatson.py	/^import Watson_sampling as Was$/;"	i
Was	ECG mains/old/7.main_system.py	/^import Watson_sampling as Was$/;"	i
Was	EM/decoder_lib.py	/^import Watson_sampling as Was$/;"	i
Was	EM_POO/CDistribution.py	/^import Watson_sampling as Was$/;"	i
Was	EM_POO/CEM.py	/^import Watson_sampling as Was$/;"	i
Was	Library Examples/2.main_SamplesGen.py	/^import Watson_sampling as Was$/;"	i
Was	Library Examples/3.main_EM_Watson.py	/^import Watson_sampling as Was$/;"	i
Was	Old Code/HMM_libfunc2_old.py	/^import Watson_sampling as Was$/;"	i
Was	utils/create_HMM_from_EM_data.py	/^import Watson_sampling as Was$/;"	i
Was	utils/data_preprocessing.py	/^import Watson_sampling as Was$/;"	i
Was	utils/system_func.py	/^import Watson_sampling as Was$/;"	i
Was	utils/system_modules.py	/^import Watson_sampling as Was$/;"	i
WatsonMeanDirDensity	Distributions/Watson/Watson_sampling.py	/^def WatsonMeanDirDensity(x, k, p):$/;"	f
WatsonMeanDirDensity	Distributions/Watson/Watson_samplingMartin.py	/^def WatsonMeanDirDensity(x, k, p):$/;"	f
Watson_K_pdf_log	Distributions/Watson/Watson_distribution.py	/^def Watson_K_pdf_log (X, theta, Cs_log = None, parameters = None):$/;"	f
Watson_K_pdf_log	Old Code/Watson_estimators (copy).py	/^def Watson_K_pdf_log (alpha, mus, kappas, cps_log = None):$/;"	f
Watson_d	ECG mains/2.main_Manu.py	/^Watson_d = Cdist.CDistribution(name = "Watson");$/;"	v
Watson_d	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^Watson_d = Cdist.CDistribution(name = "Watson");$/;"	v
Watson_d	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    Watson_d = Cdist.CDistribution(name = "Watson");$/;"	v
Watson_d	Library Examples/3.main_EM_Watson.py	/^    Watson_d = Cdist.CDistribution(name = "Watson");$/;"	v
Watson_d	Library Examples/5.main_CV_Gaussian.py	/^    Watson_d = Cdist.CDistribution(name = "Watson");$/;"	v
Watson_d	Library Examples/5.main_CV_Watson.py	/^Watson_d = Cdist.CDistribution(name = "Watson");$/;"	v
Watson_pdf	Old Code/Watson_estimators (copy).py	/^def Watson_pdf (alpha, mu, kappa, cp = None):$/;"	f
Watson_pdf_log	Distributions/Watson/Watson_distribution.py	/^def Watson_pdf_log (X, theta, C_log = None):$/;"	f
Watson_pdf_log	Old Code/Watson_estimators (copy).py	/^def Watson_pdf_log (alpha, mu, kappa, cp_log = None):$/;"	f
X	ECG mains/2.main_Manu.py	/^    X =  gf.normalize_data(data)$/;"	v
X	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    X =  gf.normalize_data(data)$/;"	v
X	ECG mains/old/6.main_data1 (copy).py	/^    X = mat["X"]   # Nchannels x Time x Ntrials$/;"	v
X	ECG mains/old/6.main_data2.py	/^X = mat["X"]   # Nchannels x Time x Ntrials$/;"	v
X1	Library Examples/1.main_TryDistribution.py	/^X1 = (1 + probs) * np.cos(Xalpha)$/;"	v
X1	Library Examples/5.main_CV_Gaussian.py	/^    X1 = np.random.multivariate_normal(mu1.flatten(), cov1, N1).T$/;"	v
X2	Library Examples/1.main_TryDistribution.py	/^X2 = (1 + probs) * np.sin(Xalpha)$/;"	v
X2	Library Examples/5.main_CV_Gaussian.py	/^    X2 = np.random.multivariate_normal(mu2.flatten(), cov2, N2).T$/;"	v
X3	Library Examples/5.main_CV_Gaussian.py	/^    X3 = np.random.multivariate_normal(mu3.flatten(), cov3, N3).T$/;"	v
X_All_labels	ECG mains/old/6.main_data1 (copy).py	/^    X_All_labels = []  # Contains the trials for every label$/;"	v
X_All_labels	ECG mains/old/6.main_data1.py	/^    X_All_labels = [X_All_labels[0], X_All_labels[2]]$/;"	v
X_All_labels	ECG mains/old/6.main_data2.py	/^X_All_labels = [X_All_labels[0], X_All_labels[2]]$/;"	v
X_All_labels	ECG mains/old/6.main_data2.py	/^X_All_labels = []  # Contains the trials for every label$/;"	v
X_All_labels	ECG mains/old/6.main_data2_noWatson.py	/^    X_All_labels = [X_All_labels[0], X_All_labels[2]]$/;"	v
X_All_labels	ECG mains/old/6.main_data2_noWatson.py	/^    X_All_labels = dp.remove_timePoints_average(X_All_labels)$/;"	v
X_All_labels	ECG mains/old/7.main_system.py	/^X_All_labels = [X_All_labels[0], X_All_labels[2]]$/;"	v
X_All_labels	ECG mains/old/7.main_system.py	/^X_All_labels = dp.remove_timePoints_average(X_All_labels)$/;"	v
X_ave	ECG mains/old/6.main_data2.py	/^        X_ave = np.mean(X_All_labels[label_i][:,:,i0:i0+3],axis = 0)$/;"	v
X_data_ave	ECG mains/old/6.main_data1.py	/^    X_data_ave = dp.get_average_from_train(Nclasses, X_train_notNormalized, y_train, $/;"	v
X_data_ave	ECG mains/old/7.main_system.py	/^X_data_ave = dp.get_timeSeries_average_by_label(X_All_labels, channel_sel = channel_sel)$/;"	v
X_data_labels	ECG mains/old/6.main_data1 (copy).py	/^    X_data_labels = []  # Labels of the trials :)$/;"	v
X_data_trials	ECG mains/old/6.main_data1 (copy).py	/^    X_data_trials = []  # List of trials :)$/;"	v
X_label_trials	ECG mains/old/6.main_data1 (copy).py	/^        X_label_trials = X[:,:,np.where(label_trials == 1)[0]].T$/;"	v
X_label_trials	ECG mains/old/6.main_data2.py	/^    X_label_trials = X[:,:,np.where(label_trials == 1)[0]].T$/;"	v
X_test	ECG mains/old/6.main_data1.py	/^    X_test = dp.normalize_trialList(X_test_notNormalized)$/;"	v
X_test_notNormalized	ECG mains/old/6.main_data1.py	/^            X_test_notNormalized = [X_data_trials[iv] for iv in val_index]$/;"	v
X_train	ECG mains/old/6.main_data1.py	/^    X_train = dp.normalize_trialList(X_train_notNormalized)$/;"	v
X_train_class_i	ECG mains/old/6.main_data1 (copy).py	/^        X_train_class_i = [ X_train[j] for j in np.where(np.array(y_train) == i)[0]]$/;"	v
X_train_class_i	ECG mains/old/6.main_data2_noWatson.py	/^        X_train_class_i = [ X_train[j] for j in np.where(np.array(y_train) == i)[0]]$/;"	v
X_train_class_i	ECG mains/old/7.main_system.py	/^        X_train_class_i = [X_data_ave[i]]$/;"	v
X_train_class_k	ECG mains/old/6.main_data1 (copy).py	/^        X_train_class_k = [ X_train[j] for j in np.where(np.array(y_train) == k)[0]]$/;"	v
X_train_class_k	ECG mains/old/6.main_data2_noWatson.py	/^        X_train_class_k = [ X_train[j] for j in np.where(np.array(y_train) == k)[0]]$/;"	v
X_train_class_k	ECG mains/old/6.main_data2_noWatson.py	/^        X_train_class_k = [X_data_ave[k]]$/;"	v
X_train_notNormalized	ECG mains/old/6.main_data1.py	/^            X_train_notNormalized = [X_data_trials[itr] for itr in train_index]$/;"	v
X_trial	ECG mains/old/6.main_data1 (copy).py	/^            X_trial = X_All_labels[i][nt,:,:]$/;"	v
X_trial	ECG mains/old/6.main_data1 (copy).py	/^            X_trial = X_trial[:,i0:i0 +ndim]$/;"	v
X_trial	ECG mains/old/6.main_data1 (copy).py	/^            X_trial = gf.normalize_data(X_trial)$/;"	v
X_trial	ECG mains/old/6.main_data2.py	/^            X_trial = X_trial  # - X_ave$/;"	v
X_trial	ECG mains/old/6.main_data2.py	/^            X_trial = np.mean(X_All_labels[label_i][[tr_i],:,i0:i0+3] , axis = 0)$/;"	v
X_trial	ECG mains/old/6.main_data2.py	/^        X_trial = X_All_labels[0][i,:,i0:i0+3] # Nsam x Ndim$/;"	v
X_trial	ECG mains/old/6.main_data2.py	/^        X_trial = gf.normalize_data(X_trial)$/;"	v
X_trial_ave	ECG mains/old/6.main_data2.py	/^            X_trial_ave = X_trial_ave - mean_shit$/;"	v
X_trial_ave	ECG mains/old/6.main_data2.py	/^            X_trial_ave = gf.normalize_data(X_trial_ave)$/;"	v
X_trial_ave	ECG mains/old/6.main_data2.py	/^            X_trial_ave = np.mean(X_All_labels[label_i][[tr_i],:,i0:i0+3] , axis = 0)$/;"	v
X_trial_ave	ECG mains/old/6.main_data2.py	/^    X_trial_ave = gf.normalize_data(X_trial_ave)$/;"	v
X_trial_ave	ECG mains/old/6.main_data2.py	/^    X_trial_ave = np.sum(X_All_labels[0][:,:,i0:i0+3] , axis = 0)$/;"	v
X_trial_ave	ECG mains/old/6.main_data2.py	/^    X_trial_ave = np.sum(X_All_labels[1][:,:,i0:i0+3] , axis = 0)$/;"	v
Xalpha	Library Examples/1.main_TryDistribution.py	/^Xalpha = np.linspace(0, 2*np.pi, Nsa)$/;"	v
Xangle	Library Examples/1.main_TryDistribution.py	/^Xangle = 0.5 *np.pi$/;"	v
Xdata	ECG mains/2.main_Manu.py	/^    Xdata = X[0,:]$/;"	v
Xdata	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    Xdata = X[0,:]$/;"	v
Xdata	ECG mains/old/main2.py	/^    Xdata = Xdata[np.where(Module > tol)[0],:]$/;"	v
Xdata	ECG mains/old/main2.py	/^    Xdata = np.divide(Xdata,Module)$/;"	v
Xdata	ECG mains/old/main2.py	/^    Xdata = np.random.randn(Nsamples,Ndim) + 2$/;"	v
Xdata	ECG mains/old/main2.py	/^    Xdata = np.random.randn(Nsamples,Ndim) - 0$/;"	v
Xdata	ECG mains/old/main2.py	/^    Xdata = np.random.randn(Nsamples,Ndim) - 2$/;"	v
Xdata	Library Examples/1.main_TryDistribution.py	/^Xdata = np.array([np.cos(Xalpha), np.sin(Xalpha)])$/;"	v
Xdata	Library Examples/2.main_SamplesGen.py	/^    Xdata = np.array(pd.read_csv(filedir, sep = ",", header = None))$/;"	v
Xdata	Library Examples/2.main_SamplesGen.py	/^Xdata = []  # List will all the generated data$/;"	v
Xdata	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        Xdata = data_chains$/;"	v
Xdata	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    Xdata = data_chains$/;"	v
Xdata	Library Examples/3.main_EM_Watson.py	/^            Xdata = copy.deepcopy(Xdata_k)$/;"	v
Xdata	Library Examples/3.main_EM_Watson.py	/^            Xdata = np.concatenate((Xdata, copy.deepcopy(Xdata_k)), axis = 0)$/;"	v
Xdata	Library Examples/3.main_EM_Watson.py	/^    Xdata = HMM_list$/;"	v
Xdata	Library Examples/5.main_CV_Gaussian.py	/^    Xdata = np.concatenate((X1,X2,X3), axis =1).T$/;"	v
Xdata	Library Examples/5.main_CV_Watson.py	/^    Xdata = gf.get_EM_data_from_HMM(HMM_list)$/;"	v
Xdata	utils/create_HMM_from_EM_data.py	/^Xdata = []  # List will all the generated data$/;"	v
Xdata2	utils/create_HMM_from_EM_data.py	/^Xdata2 = []$/;"	v
XdataSample	Library Examples/1.main_TryDistribution.py	/^            XdataSample = [np.sin(Xthetta[i])*np.cos(Xfi[j]),$/;"	v
Xdata_chain	Library Examples/3.main_EM_Watson.py	/^        Xdata_chain = np.array(Xdata_chain)$/;"	v
Xdata_k	Library Examples/2.main_SamplesGen.py	/^    Xdata_k = Was.randWatson(N, mu, kappa)$/;"	v
Xdata_k	Library Examples/3.main_EM_Watson.py	/^        Xdata_k = Xdata_k[:1000,:]$/;"	v
Xdata_k	Library Examples/3.main_EM_Watson.py	/^        Xdata_k = np.array(pd.read_csv(filedir, sep = ",", header = None))$/;"	v
Xdata_k	utils/create_HMM_from_EM_data.py	/^    Xdata_k = Xdata_k[:,:]$/;"	v
Xdata_k	utils/create_HMM_from_EM_data.py	/^    Xdata_k = np.array(pd.read_csv(filedir, sep = ",", header = None))$/;"	v
Xdata_train	ECG mains/2.main_Manu.py	/^                Xdata_train = np.concatenate( [Xdata[indx] for indx in train_index], axis = 0)$/;"	v
Xdata_train	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        Xdata_train = np.concatenate( [Xdata[indx] for indx in train_index], axis = 0)$/;"	v
Xdata_train	Library Examples/5.main_CV_Gaussian.py	/^                Xdata_train = Xdata[train_index,:]$/;"	v
Xdata_train	Library Examples/5.main_CV_Watson.py	/^                Xdata_train = Xdata[train_index,:]$/;"	v
Xdata_train_HMM_list	ECG mains/2.main_Manu.py	/^                Xdata_train_HMM_list = [HMM_list[itr] for itr in train_index]$/;"	v
Xdata_train_HMM_list	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        Xdata_train_HMM_list = [HMM_list[itr] for itr in train_index]$/;"	v
Xdata_val	ECG mains/2.main_Manu.py	/^                Xdata_val = np.concatenate( [Xdata[indx] for indx in val_index], axis = 0)$/;"	v
Xdata_val	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        Xdata_val = np.concatenate( [Xdata[indx] for indx in val_index], axis = 0)$/;"	v
Xdata_val	Library Examples/5.main_CV_Gaussian.py	/^                Xdata_val = Xdata[val_index,:]$/;"	v
Xdata_val	Library Examples/5.main_CV_Watson.py	/^                Xdata_val = Xdata[val_index,:]$/;"	v
Xdata_val_HMM_list	ECG mains/2.main_Manu.py	/^                Xdata_val_HMM_list = [HMM_list[ival] for ival in val_index]$/;"	v
Xdata_val_HMM_list	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        Xdata_val_HMM_list = [HMM_list[ival] for ival in val_index]$/;"	v
Xfi	Library Examples/1.main_TryDistribution.py	/^    Xfi = np.linspace(0, 2*np.pi, Nsa)$/;"	v
Xsample	Library Examples/1.main_TryDistribution.py	/^Xsample = [np.cos(Xangle), np.sin(Xangle)]$/;"	v
Xtest	ECG mains/old/6.main_data1.py	/^    Xtest = np.concatenate((Xtest,np.exp(Xtest)), axis = 1)$/;"	v
Xtest	ECG mains/old/6.main_data2_noWatson.py	/^Xtest = get_meanMax_trials(X_test)$/;"	v
Xtest	ECG mains/old/6.main_data2_noWatson.py	/^Xtest = np.divide(Xtest-np.tile(mx,[Ntest,1]),np.tile(stdx,[Ntest,1]))$/;"	v
Xtest_min	ECG mains/old/6.main_data2_noWatson.py	/^Xtest_min = get_meanMin_trials(X_test)$/;"	v
Xthetta	Library Examples/1.main_TryDistribution.py	/^    Xthetta = np.linspace(0, 2*np.pi, Nsa) # Grid plotting$/;"	v
Xtrain	ECG mains/old/6.main_data1.py	/^    Xtrain = np.concatenate((Xtrain,np.exp(Xtrain)), axis = 1)$/;"	v
Xtrain	ECG mains/old/6.main_data2_noWatson.py	/^Xtrain = get_meanMax_trials(X_train)$/;"	v
Xtrain	ECG mains/old/6.main_data2_noWatson.py	/^Xtrain = np.divide(Xtrain-np.tile(mx,[Ntrain,1]),np.tile(stdx,[Ntrain,1]))$/;"	v
Xtrain_min	ECG mains/old/6.main_data2_noWatson.py	/^Xtrain_min = get_meanMin_trials(X_train)$/;"	v
Ytest	ECG mains/old/6.main_data2_noWatson.py	/^Ytest = y_test$/;"	v
Ytrain	ECG mains/old/6.main_data2_noWatson.py	/^Ytrain = y_train$/;"	v
__init__	EM POO/CDistribution.py	/^    def __init__(self, distribution_list = None):$/;"	m	class:CDistributionManager
__init__	EM POO/CDistribution.py	/^    def __init__(self, name = "Distribution"):$/;"	m	class:CDistribution
__init__	EM POO/CEM.py	/^    def __init__(self, distribution = None, clusters_relation = "independent", $/;"	m	class:CEM
__init__	EM POO/CHMM.py	/^    def __init__(self, distribution = None, init_hyperparams = None,  deged_est_params = None, deged_params = None,$/;"	m	class:CHMM
__init__	EM_POO/CDistribution.py	/^    def __init__(self, name = "Distribution"):$/;"	m	class:CDistribution
__init__	EM_POO/CEM.py	/^    def __init__(self, distribution = None, init_hyperparams = None,  deged_est_params = None, deged_params = None,$/;"	m	class:CEM
__init__	EM_POO/CHMM.py	/^    def __init__(self, k = 3, delta = 0.01, T = 30, $/;"	m	class:CHMM
__init__	libs/graph/GUI/GUI_ex1.py	/^	def __init__(self, fig=None):$/;"	m	class:ClickPlot
__init__	libs/graph/GUI/graph_GUI.py	/^    def __init__(self, ax, label, image=None,$/;"	m	class:Button2
__init__	libs/graph/graph_lib.py	/^    def __init__(self,w = 20, h = 12, lw = 2):$/;"	m	class:CGraph
__init__	modules/EMmodule.py	/^    def __init__(self,K=3, alpha=0.01, max_iter=30):$/;"	m	class:EMobj
_click	libs/graph/GUI/graph_GUI.py	/^    def _click(self, event):$/;"	m	class:Button2
_motion	libs/graph/GUI/graph_GUI.py	/^    def _motion(self, event):$/;"	m	class:Button2
_release	libs/graph/GUI/graph_GUI.py	/^    def _release(self, event):$/;"	m	class:Button2
a	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
a	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
acc_scorer	ECG mains/old/6.main_data2_noWatson.py	/^    acc_scorer = make_scorer(accuracy_score)$/;"	v
accu_test	ECG mains/old/7.main_system.py	/^    accu_test = gf.accuracy(y_train, np.argmax(Likelihoods, axis = 1))$/;"	v
accu_train	ECG mains/old/7.main_system.py	/^    accu_train = gf.accuracy(y_train, np.argmax(Likelihoods, axis = 1))$/;"	v
accuracy	utils/general_func.py	/^def accuracy (Y,T):$/;"	f
accuracy_score	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import accuracy_score$/;"	i
accuracy_score	utils/system_modules.py	/^from sklearn.metrics import accuracy_score$/;"	i
add_cluster	EM POO/CDistribution.py	/^    def add_cluster(self,k, distribution_name):$/;"	m	class:CDistributionManager
add_distribution	EM POO/CDistribution.py	/^    def add_distribution(self, distribution, Kd_list):$/;"	m	class:CDistributionManager
add_hidebox	libs/graph/GUI/graph_GUI.py	/^def add_hidebox(self, plots_affected = [], $/;"	f
add_hidebox	libs/graph/graph_lib.py	/^    add_hidebox = grGUI.add_hidebox$/;"	v	class:CGraph
add_hlines	libs/graph/graph_lib.py	/^    add_hlines = grpl.add_hlines$/;"	v	class:CGraph
add_hlines	libs/graph/graph_plots.py	/^def add_hlines(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
add_indicator	libs/graph/graph_lib.py	/^    add_indicator = trgr.add_indicator$/;"	v	class:CGraph
add_indicator	libs/graph/specific/trading_graphs.py	/^def add_indicator(self, ind, name = "Indicator", inprice = 0, pos = 1):$/;"	f
add_onKeyPress	libs/graph/GUI/graph_GUI.py	/^def add_onKeyPress(self, k = "k"):$/;"	f
add_onKeyPress	libs/graph/graph_lib.py	/^    add_onKeyPress = grGUI.add_onKeyPress$/;"	v	class:CGraph
add_selector	libs/graph/GUI/graph_GUI.py	/^def add_selector(self, listing):$/;"	f
add_selector	libs/graph/graph_lib.py	/^    add_selector = grGUI.add_selector$/;"	v	class:CGraph
add_slider	libs/graph/GUI/graph_GUI.py	/^def add_slider(self, plots_affected = [], $/;"	f
add_slider	libs/graph/graph_lib.py	/^    add_slider = grGUI.add_slider$/;"	v	class:CGraph
add_text	libs/graph/graph_lib.py	/^    add_text = grset.add_text$/;"	v	class:CGraph
add_text	libs/graph/graph_setting (copy).py	/^def add_text(self, positionXY = [], text = r'an equation: $E=mc^2$',fontsize = 15):$/;"	f
add_text	libs/graph/graph_setting.py	/^def add_text(self, positionXY = [], text = r'an equation: $E=mc^2$',fontsize = 15, ax = None):$/;"	f
add_vlines	libs/graph/graph_lib.py	/^    add_vlines = grpl.add_vlines$/;"	v	class:CGraph
add_vlines	libs/graph/graph_plots.py	/^def add_vlines(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
all_colors	libs/graph/trapyngColors.py	/^all_colors = []$/;"	v
alpha	ECG mains/old/main2.py	/^alpha = 0.3*np.pi$/;"	v
alpha	modules/EMmodule.py	/^    alpha  = None$/;"	v	class:EMobj
alphas	ECG mains/old/main2.py	/^alphas = np.linspace(0, 1.9*np.pi, 1000)$/;"	v
apply_style	libs/graph/graph_lib.py	/^    apply_style = grsp.apply_style$/;"	v	class:CGraph
apply_style	libs/graph/graph_subplots.py	/^def apply_style(self, nf,na, AxesStyle = None):$/;"	f
avoid_change_sign_centroids	Distributions/Watson/Watson_distribution.py	/^def avoid_change_sign_centroids (theta_new, theta_prev):$/;"	f
avoid_change_sign_centroids	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def avoid_change_sign_centroids (theta_new, theta_prev):$/;"	f
ax1	Library Examples/5.main_CV_Gaussian.py	/^    ax1 = gl.scatter(X1[0,:],X1[1,:], labels = ["Gaussian Generated Data", "x1","x2"], $/;"	v
ax1	Library Examples/5.main_CV_Gaussian.py	/^    ax1 = gl.scatter(X2[0,:],X2[1,:], legend = ["K = 2"], color = "b", alpha = 0.5)$/;"	v
ax1	Library Examples/5.main_CV_Gaussian.py	/^    ax1 = gl.scatter(X3[0,:],X3[1,:], legend = ["K = 3"], color = "g",alpha = 0.5)$/;"	v
ax2	Library Examples/1.main_TryDistribution.py	/^ax2 = gl.plot(Basex,Basey, $/;"	v
ax2	Library Examples/1.main_TryDistribution.py	/^ax2 = gl.plot(X1,X2, $/;"	v
bMA	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import basicMathlib as bMA$/;"	i
bMA	Library Examples/5.main_CV_Gaussian.py	/^import basicMathlib as bMA$/;"	i
bMA	libs/specific_plotting_func.py	/^import basicMathlib as bMA$/;"	i
bMa	libs/graph/graph_setting (copy).py	/^import basicMathlib as bMa$/;"	i
bar	libs/graph/graph_lib.py	/^    bar = grpl.bar$/;"	v	class:CGraph
bar	libs/graph/graph_plots.py	/^def bar(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
bar_3D	libs/graph/graph_3D.py	/^def bar_3D (self, Xgrid,Ygrid, Zvalues,$/;"	f
bar_3D	libs/graph/graph_lib.py	/^    bar_3D = gr3D.bar_3D$/;"	v	class:CGraph
barchart	libs/graph/graph_advanced.py	/^def barchart(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
barchart	libs/graph/graph_lib.py	/^    barchart = grad.barchart$/;"	v	class:CGraph
base_path	import_folders.py	/^base_path = os.path.abspath('')$/;"	v
base_path	libs/import_folders.py	/^base_path = os.path.abspath('')$/;"	v
bbox_inches	ECG mains/old/6.main_data1.py	/^            bbox_inches = 'tight',$/;"	v
bleft_func	libs/graph/GUI/graph_GUI.py	/^    def bleft_func(event,caca):$/;"	f	function:add_slider
blues	libs/graph/trapyngColors.py	/^blues = [$/;"	v
bright_func	libs/graph/GUI/graph_GUI.py	/^    def bright_func(event,caca):$/;"	f	function:add_slider
candlestick	libs/graph/GUI/graph_GUI_ad (copy).py	/^candlestick = candlestick_ohlc$/;"	v
candlestick	libs/graph/graph_advanced.py	/^def candlestick(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
candlestick	libs/graph/graph_lib.py	/^    candlestick = grad.candlestick$/;"	v	class:CGraph
candlestick	libs/graph/specific/trading_graphs.py	/^candlestick = candlestick_ohlc$/;"	v
candlestick_ohlc	libs/graph/GUI/graph_GUI.py	/^from matplotlib.finance import candlestick_ohlc$/;"	i
candlestick_ohlc	libs/graph/GUI/graph_GUI_ad (copy).py	/^from matplotlib.finance import candlestick_ohlc$/;"	i
candlestick_ohlc	libs/graph/specific/trading_graphs.py	/^from matplotlib.finance import candlestick_ohlc$/;"	i
cd	libs/graph/graph_basic.py	/^from trapyngColors import cd$/;"	i
cd	libs/graph/graph_setting.py	/^from trapyngColors import cd$/;"	i
cd	libs/graph/trapyngColors.py	/^cd = dict(all_colors)  # Color dictionary/;"	v
channel_sel	ECG mains/old/6.main_data1.py	/^    channel_sel = range(70)$/;"	v
channel_sel	ECG mains/old/6.main_data2_noWatson.py	/^    channel_sel = range(0,70)  # Subset of channels selected$/;"	v
channel_sel	ECG mains/old/7.main_system.py	/^channel_sel = np.random.permutation(possible_channels)[0:Nchannels_chosen].flatten().tolist()      # Randomize the array of index$/;"	v
check_Kummer	Distributions/Watson/Watson_distribution.py	/^def check_Kummer(Ndim, kappa):$/;"	f
check_Kummer	Old Code/Watson_estimators (copy).py	/^def check_Kummer(Ndim, kappa):$/;"	f
check_params	Distributions/Watson/Watson_distribution.py	/^def check_params(theta):$/;"	f
cholesky	Distributions/Gaussian/Gaussian_distribution.py	/^from scipy.linalg import cholesky$/;"	i
class_i	ECG mains/old/6.main_data1.py	/^    class_i = 0$/;"	v
class_i	ECG mains/old/6.main_data1.py	/^    class_i = 1;$/;"	v
classify_with_Likelihood_EM	utils/system_modules.py	/^def classify_with_Likelihood_EM(X_train, X_test, y_train, y_test, Ks_params):$/;"	f
classify_with_Likelihood_HMM	utils/system_modules.py	/^def classify_with_Likelihood_HMM(X_train, X_test, y_train, y_test, Is_params):$/;"	f
clearMarker	libs/graph/GUI/GUI_ex1.py	/^	def clearMarker(self):$/;"	m	class:ClickPlot
close	ECG mains/old/6.main_data1.py	/^            close = True,   # If we close the figure once saved$/;"	v
close	libs/graph/graph_basic.py	/^def close(self,  *args, **kwargs):$/;"	f
close	libs/graph/graph_lib.py	/^    close = grba.close$/;"	v	class:CGraph
clusters_relation	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    clusters_relation = "independent"   # MarkovChain1  independent$/;"	v
clusters_relation	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        clusters_relation = "MarkovChain1"   # MarkovChain1  independent$/;"	v
clusters_relation	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    clusters_relation = "independent"   # MarkovChain1  independent$/;"	v
clusters_relation	Library Examples/3.main_EM_Watson.py	/^    clusters_relation = "MarkovChain1"   # MarkovChain1  independent$/;"	v
clusters_relation	Library Examples/5.main_CV_Gaussian.py	/^    clusters_relation = "MarkovChain1"   # MarkovChain1  independent$/;"	v
clusters_relation	Library Examples/5.main_CV_Watson.py	/^    clusters_relation = "MarkovChain1"   # MarkovChain1  independent$/;"	v
cm	libs/graph/graph_3D.py	/^from matplotlib import cm$/;"	i
color	Library Examples/3.main_EM_Watson.py	/^                          color = "red")$/;"	v
color_axis	libs/graph/graph_axis.py	/^def color_axis(self, ax = None, color_spines = "w", color_axis = "w"):$/;"	f
color_axis	libs/graph/graph_lib.py	/^    color_axis = graxis.color_axis$/;"	v	class:CGraph
color_axis	libs/graph/graph_setting (copy).py	/^def color_axis(self, ax, color_spines = "w", color_axis = "w"):$/;"	f
colorfunc	libs/graph/GUI/graph_GUI.py	/^    def colorfunc(label):$/;"	f	function:pene
colors	ECG mains/old/6.main_data2.py	/^    colors = ["k","r"]$/;"	v
colorstr2rgb	visualizations/distinguishable_colors.m	/^function c = colorstr2rgb(c)$/;"	f
comparador_images_names	libs/utilities_lib.py	/^def comparador_images_names(x1,x2):$/;"	f
computeMACD	libs/graph/GUI/graph_GUI_ad (copy).py	/^def computeMACD(x, slow=26, fast=12):$/;"	f
cond_i	ECG mains/2.main_Manu.py	/^    cond_i = 0$/;"	v
cond_i	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    cond_i = 0$/;"	v
convert_dates_str	libs/graph/graph_setting (copy).py	/^def convert_dates_str(X):$/;"	f
convert_dates_str	libs/graph/graph_setting.py	/^def convert_dates_str(X):$/;"	f
convert_to_matrix	libs/utilities_lib.py	/^def convert_to_matrix (lista, max_size = -1):$/;"	f
convolve	libs/basicMathlib.py	/^def convolve(signal, window, mode = "full"):$/;"	f
copy	ECG mains/1.main_Arturo.py	/^import copy$/;"	i
copy	ECG mains/2.main_Manu.py	/^import copy$/;"	i
copy	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import copy$/;"	i
copy	ECG mains/old/6.main_data1 (copy).py	/^import copy$/;"	i
copy	ECG mains/old/6.main_data1.py	/^import copy$/;"	i
copy	ECG mains/old/6.main_data2.py	/^import copy$/;"	i
copy	ECG mains/old/6.main_data2_noWatson.py	/^import copy$/;"	i
copy	ECG mains/old/7.main_system.py	/^import copy$/;"	i
copy	EM POO/CDistribution.py	/^import copy$/;"	i
copy	EM/EM_lib.py	/^import copy $/;"	i
copy	EM/HMM_lib.py	/^import copy$/;"	i
copy	EM/HMM_libfunc.py	/^import copy$/;"	i
copy	EM/decoder_lib.py	/^import copy$/;"	i
copy	EM_POO/CDistribution.py	/^import copy$/;"	i
copy	EM_POO/CEM.py	/^import copy$/;"	i
copy	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import copy$/;"	i
copy	Library Examples/3.main_EM_Watson.py	/^import copy$/;"	i
copy	Library Examples/5.main_CV_Gaussian.py	/^import copy$/;"	i
copy	Library Examples/5.main_CV_Watson.py	/^import copy$/;"	i
copy	Old Code/HMM_lib (copy).py	/^import copy$/;"	i
copy	Old Code/HMM_lib before.py	/^import copy$/;"	i
copy	libs/graph/graph_advanced.py	/^import copy$/;"	i
copy	libs/graph/graph_basic.py	/^import copy$/;"	i
copy	libs/graph/graph_setting (copy).py	/^import copy$/;"	i
copy	libs/graph/graph_setting.py	/^import copy$/;"	i
copy	utils/create_HMM_from_EM_data.py	/^import copy$/;"	i
copy	utils/data_preprocessing.py	/^import copy$/;"	i
copy	utils/general_func.py	/^import copy$/;"	i
copy	utils/system_func.py	/^import copy$/;"	i
copy	utils/system_modules.py	/^import copy$/;"	i
copy_file	libs/utilities_lib.py	/^def copy_file(file_source, file_destination, new_name = ""):$/;"	f
cosas	ECG mains/old/6.main_data1.py	/^    cosas = pkl.load_pickle(".\/OnePerson1FoldEM.pkl")$/;"	v
cosasX1	ECG mains/old/6.main_data1.py	/^    cosasX1 = pkl.load_pickle(".\/OnePerson1FoldEM.pkl")$/;"	v
cosasX2	ECG mains/old/6.main_data1.py	/^    cosasX2 = pkl.load_pickle(".\/OnePerson1FoldHMM.pkl")$/;"	v
cov1	Library Examples/5.main_CV_Gaussian.py	/^    cov1 = np.array([[1,0.4],$/;"	v
cov2	Library Examples/5.main_CV_Gaussian.py	/^    cov2 = np.array([[1.5,-0.2],$/;"	v
cov3	Library Examples/5.main_CV_Gaussian.py	/^    cov3 = np.array([[2,-0.8],$/;"	v
cp	ECG mains/old/main2.py	/^cp = get_cp(Ndim, kappa)$/;"	v
cp	vonMises/vonMisesFisher.py	/^def cp(p,kappa):$/;"	f
cp_log	vonMises/vonMisesFisher.py	/^def cp_log(p,kappa):$/;"	f
cp_logs	ECG mains/old/caca.py	/^cp_logs = []$/;"	v
cp_logs	ECG mains/old/caca.py	/^cp_logs = np.array(cp_logs)$/;"	v
create_axes	libs/graph/graph_axes.py	/^def create_axes(self, position = [], projection = "2d",$/;"	f
create_axes	libs/graph/graph_lib.py	/^    create_axes = graxes.create_axes$/;"	v	class:CGraph
create_axes	libs/graph/graph_setting (copy).py	/^def create_axes(self, position = [], projection = "2d"):$/;"	f
create_data	utils/system_modules.py	/^def create_data(X_All_labels, label_classes, $/;"	f
create_folder_if_needed	libs/utilities_lib.py	/^def create_folder_if_needed (folder):$/;"	f
create_gif	libs/utilities_lib.py	/^def create_gif(filenames, output_file_gif = "gif_output.gif", duration = 0.2):$/;"	f
create_video	libs/utilities_lib.py	/^def create_video(images_path, output_file = "out.avi", fps = 5):$/;"	f
creating_data	ECG mains/old/6.main_data1.py	/^creating_data = 1$/;"	v
creating_data	ECG mains/old/6.main_data2_noWatson.py	/^creating_data = 1$/;"	v
cross_validation	ECG mains/2.main_Manu.py	/^from sklearn import cross_validation$/;"	i
cross_validation	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^from sklearn import cross_validation$/;"	i
cross_validation	ECG mains/old/6.main_data1.py	/^from sklearn import cross_validation$/;"	i
cross_validation	Library Examples/5.main_CV_Gaussian.py	/^from sklearn import cross_validation$/;"	i
cross_validation	Library Examples/5.main_CV_Watson.py	/^from sklearn import cross_validation$/;"	i
cross_validation	utils/system_modules.py	/^from sklearn import cross_validation$/;"	i
culo	ECG mains/old/6.main_data1.py	/^    culo = pkl.load_pickle(".\/OnePerson1FoldHMM.pkl")$/;"	v
cv2	libs/utilities_lib.py	/^import cv2$/;"	i
data	ECG mains/old/caca.py	/^data = np.random.randn(D,Nsam);$/;"	v
data_chains	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        data_chains = [np.concatenate((X1,X2), axis = 1).T]$/;"	v
data_chains	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        data_chains = gf.draw_HMM_samples(data_index, [X1.T,X2.T,X3.T])$/;"	v
data_index	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        data_index = gf.draw_HMM_indexes(pi, A, Nchains, Nsamples)$/;"	v
dataset_folder	ECG mains/old/6.main_data1 (copy).py	/^    dataset_folder = ".\/dataset\/"$/;"	v
dataset_folder	ECG mains/old/6.main_data2.py	/^dataset_folder = ".\/dataset\/"$/;"	v
datetime	libs/graph/GUI/graph_GUI_ad (copy).py	/^import datetime$/;"	i
decl	ECG mains/old/6.main_data1 (copy).py	/^import decoder_lib as decl$/;"	i
decl	ECG mains/old/6.main_data1.py	/^import decoder_lib as decl$/;"	i
decl	ECG mains/old/6.main_data2.py	/^import decoder_lib as decl$/;"	i
decl	ECG mains/old/6.main_data2_noWatson.py	/^import decoder_lib as decl$/;"	i
decl	ECG mains/old/7.main_system.py	/^import decoder_lib as decl$/;"	i
decl	EM_POO/CHMM.py	/^import decoder_lib as decl$/;"	i
decl	utils/data_preprocessing.py	/^import decoder_lib as decl$/;"	i
decl	utils/system_func.py	/^import decoder_lib as decl$/;"	i
decl	utils/system_modules.py	/^import decoder_lib as decl$/;"	i
degenerated_estimation_handler	Distributions/Gaussian/Gaussian_distribution.py	/^def degenerated_estimation_handler(X, rk , prev_theta_k, parameters = None ):$/;"	f
degenerated_estimation_handler	Distributions/Watson/Watson_distribution.py	/^def degenerated_estimation_handler(X, rk , prev_theta_k, parameters = None ):$/;"	f
degenerated_estimation_handler	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def degenerated_estimation_handler(X, rk , prev_theta_k, parameters = None ):$/;"	f
degenerated_estimation_handler	EM POO/CDistribution.py	/^    def degenerated_estimation_handler(X, rk , prev_theta_k , parameters = None):$/;"	m	class:CDistribution
degenerated_params_handler	Distributions/Gaussian/Gaussian_distribution.py	/^def degenerated_params_handler(X, rk , prev_theta_k, parameters = None):$/;"	f
degenerated_params_handler	Distributions/Watson/Watson_distribution.py	/^def degenerated_params_handler(X, rk , prev_theta_k, parameters = None):$/;"	f
degenerated_params_handler	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def degenerated_params_handler(X, rk , prev_theta_k, parameters = None):$/;"	f
degenerated_params_handler	EM POO/CDistribution.py	/^    def degenerated_params_handler(X, rk , prev_theta_k , parameters = None):$/;"	m	class:CDistribution
delta	libs/basicMathlib.py	/^def delta(L):$/;"	f
delta_ll	ECG mains/2.main_Manu.py	/^    delta_ll = 0.02$/;"	v
delta_ll	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    delta_ll = 0.02$/;"	v
delta_ll	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    delta_ll = 0.02$/;"	v
delta_ll	Library Examples/3.main_EM_Watson.py	/^    delta_ll = 0.02$/;"	v
delta_ll	Library Examples/5.main_CV_Gaussian.py	/^    delta_ll = 0.02$/;"	v
delta_ll	Library Examples/5.main_CV_Watson.py	/^    delta_ll = 0.02$/;"	v
detect_AxisFormat	libs/graph/graph_setting.py	/^def detect_AxisFormat(values):$/;"	f
df	vonMises/data/outputs/visualization.py	/^df = pd.read_csv(file_name,sep=',',index_col = 0)$/;"	v
diff	libs/basicMathlib.py	/^def diff(X, lag = 1, n = 1, cval = np.nan): # cval=np.NaN$/;"	f
diffw	libs/basicMathlib.py	/^def diffw(L, lag = 1): # Window for the lagging$/;"	f
difu	ECG mains/old/caca.py	/^import distributions_func as difu$/;"	i
difu	Old Code/HMM_lib (copy).py	/^import distributions_func as difu$/;"	i
difu	Old Code/HMM_lib before.py	/^import distributions_func as difu$/;"	i
difu	Old Code/HMM_libfunc.py	/^import distributions_func as difu$/;"	i
disconnect	libs/graph/GUI/graph_GUI.py	/^    def disconnect(self, cid):$/;"	m	class:Button2
dist	modules/EMmodule.py	/^    dist = None$/;"	v	class:EMobj
distinguishable_colors	visualizations/distinguishable_colors.m	/^function colors = distinguishable_colors(n_colors,bg,func)$/;"	f
distribution_name	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        distribution_name = myDManager.clusterk_to_Dname[k_c] # G W$/;"	v
distribution_name	Library Examples/3.main_EM_Watson.py	/^            distribution_name = myDManager.clusterk_to_Dname[k_c] # G W$/;"	v
distribution_name	Library Examples/3.main_EM_Watson.py	/^        distribution_name = myDManager.clusterk_to_Dname[k_c] # G W$/;"	v
dp	ECG mains/old/6.main_data1.py	/^import data_preprocessing as dp$/;"	i
dp	ECG mains/old/6.main_data2_noWatson.py	/^import data_preprocessing as dp$/;"	i
dp	ECG mains/old/7.main_system.py	/^import data_preprocessing as dp$/;"	i
dp	utils/system_func.py	/^import data_preprocessing as dp$/;"	i
dp	utils/system_modules.py	/^import data_preprocessing as dp$/;"	i
dpi	ECG mains/old/6.main_data1.py	/^            dpi = 100)      # Density of pixels !! Same image but more cuality ! Pixels$/;"	v
draw_HMM_indexes	Old Code/Watson_estimators (copy).py	/^def draw_HMM_indexes(pi, A, Nchains = 10, Nsamples = 30):$/;"	f
draw_HMM_indexes	utils/general_func.py	/^def draw_HMM_indexes(pi, A, Nchains = 10, Nsamples = 30):$/;"	f
draw_HMM_samples	Old Code/Watson_estimators (copy).py	/^def draw_HMM_samples(Chains_list, Samples_clusters):$/;"	f
draw_HMM_samples	utils/general_func.py	/^def draw_HMM_samples(Chains_list, Samples_clusters):$/;"	f
dt	libs/basicMathlib.py	/^import datetime as dt$/;"	i
dt	libs/graph/graph_advanced.py	/^import datetime as dt$/;"	i
dt	libs/graph/graph_plots.py	/^import datetime as dt$/;"	i
dt	libs/graph/specific/graph_tsa.py	/^import datetime as dt$/;"	i
dt	libs/graph/specific/trading_graphs.py	/^import datetime as dt$/;"	i
dt	libs/utilities_lib.py	/^import datetime as dt$/;"	i
dvs	ECG mains/old/caca.py	/^dvs = HMMlf.sum_logs([10,10,10])$/;"	v
eachStock	libs/graph/GUI/graph_GUI_ad (copy).py	/^eachStock = 'EBAY','TSLA','AAPL'$/;"	v
eigsorted2	libs/basicMathlib.py	/^def eigsorted2(data):$/;"	f
empirical_1D_cdf	libs/basicMathlib.py	/^def empirical_1D_cdf(X):$/;"	f
empty_coliseum	libs/utilities_lib.py	/^empty_coliseum = pd.DataFrame(None,columns = keys_col )$/;"	v
empty_df	libs/utilities_lib.py	/^empty_df= pd.DataFrame(None,columns = keys )$/;"	v
ert	ECG mains/old/6.main_data2_noWatson.py	/^    ert = ExtraTreesClassifier(n_estimators=1000,max_features=gtree.best_estimator_.max_features,max_depth=gtree.best_estimator_.max_depth,min_samples_split=gtree.best_estimator_.min_samples_split,n_jobs=-1)$/;"	v
fake_labels	ECG mains/2.main_Manu.py	/^    fake_labels = np.ones(Xdata.shape[0]).flatten() # Emulation of all samples have the same class$/;"	v
fake_labels	ECG mains/2.main_Manu.py	/^    fake_labels = np.ones(len(HMM_list)).flatten() # Emulation of all samples have the same class$/;"	v
fake_labels	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    fake_labels = np.ones(Xdata.shape[0]).flatten() # Emulation of all samples have the same class$/;"	v
fake_labels	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    fake_labels = np.ones(len(HMM_list)).flatten() # Emulation of all samples have the same class$/;"	v
fake_labels	Library Examples/5.main_CV_Gaussian.py	/^    fake_labels = np.ones(Xdata.shape[0]).flatten() # Emulation of all samples have the same class$/;"	v
fake_labels	Library Examples/5.main_CV_Watson.py	/^    fake_labels = np.ones(Xdata.shape[0]).flatten() # Emulation of all samples have the same class$/;"	v
fig	libs/graph/GUI/GUI_ex1.py	/^	fig = pyplot.figure()$/;"	v
figure_management	libs/graph/graph_basic.py	/^def figure_management(self, nf, na, ax = None, sharex = None, sharey = None, $/;"	f
figure_management	libs/graph/graph_lib.py	/^    figure_management = grba.figure_management$/;"	v	class:CGraph
figure_management	libs/graph/graph_setting (copy).py	/^def figure_management(self, nf, na, labels, fontsize, ax = None, projection = "2d", position = []):$/;"	f
file_name	vonMises/data/outputs/visualization.py	/^file_name = 'vonM_Famous.csv'$/;"	v
filedir	Library Examples/2.main_SamplesGen.py	/^    filedir = folder_EM + "Wdata_"+ str(k)+ ".csv"$/;"	v
filedir	Library Examples/2.main_SamplesGen.py	/^    filedir = folder_EM +"Wdata.csv"$/;"	v
filedir	Library Examples/3.main_EM_Watson.py	/^        filedir = folder + "Wdata_"+ str(k)+".csv"$/;"	v
filedir	utils/create_HMM_from_EM_data.py	/^    filedir = folder + "Wdata_"+ str(k)+".csv"$/;"	v
filename	ECG mains/old/6.main_data1.py	/^                                                          filename = filename)$/;"	v
filename	ECG mains/old/6.main_data1.py	/^    filename =  'face_scrambling_spm8proc_sub07.mat'$/;"	v
filename	ECG mains/old/6.main_data2_noWatson.py	/^                                                          filename = 'face_scrambling_spm8proc_sub07.mat')$/;"	v
filename	ECG mains/old/7.main_system.py	/^                                                      filename = 'face_scrambling_spm8proc_sub07.mat')$/;"	v
fill_between	libs/graph/graph_lib.py	/^    fill_between = grpl.fill_between$/;"	v	class:CGraph
fill_between	libs/graph/graph_plots.py	/^def fill_between(self, x, y1,  y2 = 0, $/;"	f
fit	EM POO/CEM.py	/^    def fit(self, data, model_theta_init = None, theta_init = None):$/;"	m	class:CEM
fit	EM POO/CHMM.py	/^    def fit(self, data, pi_init = None, A_init = None, theta_init = None):$/;"	m	class:CHMM
fit	EM_POO/CEM.py	/^    def fit(self, X, pi_init = None, theta_init = None):$/;"	m	class:CEM
fit	EM_POO/CHMM.py	/^    def fit (X):$/;"	m	class:CHMM
fit	modules/EMmodule.py	/^    def fit(self,Xdata,pi_init=None,theta_init=None):$/;"	m	class:EMobj
fnp	libs/utilities_lib.py	/^def fnp(ds):$/;"	f
folder	ECG mains/1.main_Arturo.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	ECG mains/2.main_Manu.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	EM POO/CDistribution.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	EM_POO/CDistribution.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	EM_POO/CEM.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	Library Examples/3.main_EM_Watson.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	Library Examples/5.main_CV_Gaussian.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	Library Examples/5.main_CV_Watson.py	/^folder = ".\/data\/test_data\/"$/;"	v
folder	utils/create_HMM_from_EM_data.py	/^    folder = ".\/EM_data\/"$/;"	v
folder	utils/create_HMM_from_EM_data.py	/^    folder = ".\/test_data\/"$/;"	v
folder	utils/create_HMM_from_EM_data.py	/^folder = ".\/HMM_data\/"$/;"	v
folder_EM	Library Examples/2.main_SamplesGen.py	/^folder_EM = "..\/data\/EM_data\/"$/;"	v
folder_HMM	ECG mains/1.main_Arturo.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	ECG mains/2.main_Manu.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	EM POO/CDistribution.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	EM_POO/CDistribution.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	EM_POO/CEM.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	Library Examples/2.main_SamplesGen.py	/^folder_HMM = "..\/data\/HMM_data\/"$/;"	v
folder_HMM	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	Library Examples/3.main_EM_Watson.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	Library Examples/5.main_CV_Gaussian.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_HMM	Library Examples/5.main_CV_Watson.py	/^folder_HMM = ".\/data\/HMM_data\/"$/;"	v
folder_images	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^folder_images = "..\/pics\/Trapying\/EM_HMM\/ECG\/"$/;"	v
folder_images	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^folder_images = "..\/pics\/Trapying\/EM_HMM\/"$/;"	v
folder_images	Library Examples/5.main_CV_Gaussian.py	/^folder_images = "..\/pics\/Trapying\/EM_HMM\/"$/;"	v
folder_images	Library Examples/5.main_CV_Watson.py	/^folder_images = "..\/pics\/Trapying\/EM_HMM\/"$/;"	v
folder_images_gif	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    folder_images_gif = "..\/pics\/Trapying\/EM_HMM\/gif\/"$/;"	v
fontsize	ECG mains/old/6.main_data1.py	/^            fontsize = 25,   # The font for the labels in the title$/;"	v
fontsizeA	ECG mains/old/6.main_data1.py	/^            fontsizeA = 20)$/;"	v
fontsizeL	ECG mains/old/6.main_data1.py	/^            fontsizeL = 30,  # The font for the labels in the legeng$/;"	v
for	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
for	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
format_axis	libs/graph/graph_setting (copy).py	/^def format_axis (self, nf = 0, fontsize = -1 , period = 10,  val = 0, wsize = -1):$/;"	f
format_axis2	libs/graph/graph_axis.py	/^def format_axis2(self,ax, Nx = 10, Ny = 5, $/;"	f
format_axis2	libs/graph/graph_lib.py	/^    format_axis2 = graxis.format_axis2$/;"	v	class:CGraph
format_axis2	libs/graph/graph_setting (copy).py	/^def format_axis2(self,ax, Nx = 10, Ny = 5, fontsize = -1, rotation = 45):$/;"	f
format_axis_3D	libs/graph/graph_3D.py	/^def format_axis_3D (self,nf = 0, fontsize = -1):$/;"	f
format_axis_3D	libs/graph/graph_lib.py	/^    format_axis_3D = gr3D.format_axis_3D$/;"	v	class:CGraph
format_legend	libs/graph/graph_lib.py	/^    format_legend = grset.format_legend$/;"	v	class:CGraph
format_legend	libs/graph/graph_setting.py	/^def format_legend(self, ax = None, handlelength=None, # Length of handle$/;"	f
format_plot	libs/graph/graph_setting (copy).py	/^def format_plot(self):$/;"	f
format_xaxis	libs/graph/graph_axis.py	/^def format_xaxis (self, ax = None, $/;"	f
format_xaxis	libs/graph/graph_lib.py	/^    format_xaxis = graxis.format_xaxis$/;"	v	class:CGraph
format_yaxis	libs/graph/graph_axis.py	/^def format_yaxis (self, ax = None, $/;"	f
format_yaxis	libs/graph/graph_lib.py	/^    format_yaxis = graxis.format_yaxis$/;"	v	class:CGraph
gamma	Distributions/Gaussian/Gaussian_distribution.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/Gaussian/Gaussian_estimators.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/Watson/Watson_distribution.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/Watson/Watson_estimators.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/Watson/Watson_estimators2.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/Watson/Watson_sampling.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/Watson/sampler_lib.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^from scipy.special import gamma$/;"	i
gamma	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^from scipy.special import gamma$/;"	i
gamma	ECG mains/old/6.main_data2_noWatson.py	/^    gamma = np.array([0.125,0.25,0.5,1,2,4])\/200$/;"	v
gamma	ECG mains/old/main2.py	/^from scipy.special import gamma$/;"	i
gamma	EM/EM_libfunc.py	/^from scipy.special import gamma$/;"	i
gamma	Old Code/EM_libfunc_previous.py	/^from scipy.special import gamma$/;"	i
gamma	Old Code/Watson_estimators (copy).py	/^from scipy.special import gamma$/;"	i
gamma	utils/general_func.py	/^from scipy.special import gamma$/;"	i
gaussian1D_points	libs/basicMathlib.py	/^def gaussian1D_points(X = None, mean = None, std = None, $/;"	f
gaussian1D_points_cdf	libs/basicMathlib.py	/^def gaussian1D_points_cdf(X = None, mean = None, std = None, $/;"	f
gc	libs/pickle_lib.py	/^import gc$/;"	i
generate_Gaussian_data	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^generate_Gaussian_data = 1$/;"	v
generate_Gaussian_data	Library Examples/5.main_CV_Gaussian.py	/^generate_Gaussian_data = 1 # To plot the data $/;"	v
generate_data	Library Examples/2.main_SamplesGen.py	/^generate_data = 1$/;"	v
generate_gaussian_data	libs/specific_plotting_func.py	/^def generate_gaussian_data(folder_images, plot_original_data, N1 = 200, N2 = 300, N3 = 50):$/;"	f
generate_images_iterations	libs/specific_plotting_func.py	/^def generate_images_iterations(Xs,mus,covs, Ks ,myDManager, logl,theta_list,model_theta_list,folder_images_gif):$/;"	f
generate_images_iterations_ll	libs/specific_plotting_func.py	/^def generate_images_iterations_ll(Xdata,mu1,cov1,mu2,cov2, K_G, K_W,myDManager, logl,theta_list,model_theta_list,folder_images_gif):$/;"	f
getSubPlotNr	libs/graph/GUI/GUI_ex1.py	/^	def getSubPlotNr(self, event):$/;"	m	class:ClickPlot
get_2EM_vectors	utils/system_modules.py	/^def get_2EM_vectors(X_All_labels, label_classes, $/;"	f
get_A	EM/HMM_libfunc.py	/^def get_A(fi):$/;"	f
get_Cs_log	Distributions/Gaussian/Gaussian_distribution.py	/^def get_Cs_log(theta, parameters = None):$/;"	f
get_Cs_log	Distributions/Watson/Watson_distribution.py	/^def get_Cs_log(theta,  parameters = None):$/;"	f
get_Cs_log	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def get_Cs_log(theta,  parameters = None):$/;"	f
get_Cs_log	EM POO/CDistribution.py	/^    def get_Cs_log(self, theta):$/;"	m	class:CDistributionManager
get_Cs_log	EM POO/CDistribution.py	/^    def get_Cs_log(theta_k):$/;"	m	class:CDistribution
get_EM_Incomloglike	Old Code/EM_libfunc_previous.py	/^def get_EM_Incomloglike(theta,pimix,X):$/;"	f
get_EM_Incomloglike_byCluster_log	Old Code/EM_libfunc_previous.py	/^def get_EM_Incomloglike_byCluster_log(theta,pimix,X):$/;"	f
get_EM_Incomloglike_log	Old Code/EM_libfunc_previous.py	/^def get_EM_Incomloglike_log(X, distribution, theta,pimix):$/;"	f
get_EM_clusters	utils/system_func.py	/^def get_EM_clusters():$/;"	f
get_EM_data_from_HMM	utils/general_func.py	/^def get_EM_data_from_HMM(HMM_list, Nchains_load = -1):$/;"	f
get_ERT	utils/system_modules.py	/^def get_ERT(Xtrain, Xtest, Ytrain, Ytest, gtree):$/;"	f
get_Elliot_Trends	libs/utilities_lib.py	/^def get_Elliot_Trends (yt, Nmin = 4, Noise = -1):$/;"	f
get_GNB	utils/system_modules.py	/^def get_GNB(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_Gaussian_muSigma_ML	Distributions/Gaussian/Gaussian_estimators.py	/^def get_Gaussian_muSigma_ML(X, rk = None, parameters = None):$/;"	f
get_HMM_Incomloglike	Old Code/HMM_libfunc2_old.py	/^def get_HMM_Incomloglike(A,B,pi,data, alpha = []):$/;"	f
get_HMM_Incomloglike_beta	EM/HMM_libfunc.py	/^def get_HMM_Incomloglike_beta(A,B,pi,data, beta = []):$/;"	f
get_KNN	utils/system_modules.py	/^def get_KNN(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_LDA	utils/system_modules.py	/^def get_LDA(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_LSVM	utils/system_modules.py	/^def get_LSVM(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_LogReg	utils/system_modules.py	/^def get_LogReg(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_MLkappa	Distributions/Watson/Watson_estimators2.py	/^def get_MLkappa(mu,X, S = None):$/;"	f
get_MLkappa	Old Code/Watson_estimators (copy).py	/^def get_MLkappa(mu,X, S = None):$/;"	f
get_MLmean	Distributions/Watson/Watson_estimators2.py	/^def get_MLmean(X, S = None):$/;"	f
get_MLmean	Old Code/Watson_estimators (copy).py	/^def get_MLmean(X, S = None):$/;"	f
get_QDA	utils/system_modules.py	/^def get_QDA(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_RF	utils/system_modules.py	/^def get_RF(Xtrain, Xtest, Ytrain, Ytest, gtree):$/;"	f
get_SVM	utils/system_modules.py	/^def get_SVM(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_SVM_rf	utils/system_modules.py	/^def get_SVM_rf(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_SharpR	libs/basicMathlib.py	/^def get_SharpR(Returns, axis = 0, Rf = 0):$/;"	f
get_SortinoR	libs/basicMathlib.py	/^def get_SortinoR(Returns, axis = 0):$/;"	f
get_TreeCl	utils/system_modules.py	/^def get_TreeCl(Xtrain, Xtest, Ytrain, Ytest):$/;"	f
get_TurnOver	libs/basicMathlib.py	/^def get_TurnOver(w1,w2):$/;"	f
get_Watson_Wighted_muKappa_ML	Distributions/Watson/Watson_estimators2.py	/^def get_Watson_Wighted_muKappa_ML(X, rk):$/;"	f
get_Watson_Wighted_muKappa_ML	Old Code/Watson_estimators (copy).py	/^def get_Watson_Wighted_muKappa_ML(X, rk):$/;"	f
get_Watson_kappa_ML	Distributions/Watson/Watson_estimators.py	/^def get_Watson_kappa_ML(X, mu,  Sk = None, rk = None, Niter = None):$/;"	f
get_Watson_muKappa_ML	Distributions/Watson/Watson_estimators.py	/^def get_Watson_muKappa_ML(X, rk = None, parameters = None):$/;"	f
get_Watson_muKappa_ML	Distributions/Watson/Watson_estimators2.py	/^def get_Watson_muKappa_ML(X):$/;"	f
get_Watson_muKappa_ML	Old Code/Watson_estimators (copy).py	/^def get_Watson_muKappa_ML(X):$/;"	f
get_Watson_mus_ML	Distributions/Watson/Watson_estimators.py	/^def get_Watson_mus_ML(X, rk = None):$/;"	f
get_Weighted_MLMean	Distributions/Watson/Watson_estimators2.py	/^def get_Weighted_MLMean(rk,X, Sk = None):$/;"	f
get_Weighted_MLMean	Old Code/Watson_estimators (copy).py	/^def get_Weighted_MLMean(rk,X, Sk = None):$/;"	f
get_Weighted_MLkappa	Distributions/Watson/Watson_estimators2.py	/^def get_Weighted_MLkappa(rk, mu,X, Sk = None):$/;"	f
get_Weighted_MLkappa	Old Code/Watson_estimators (copy).py	/^def get_Weighted_MLkappa(rk, mu,X, Sk = None):$/;"	f
get_X_trials_EM	utils/data_preprocessing.py	/^def get_X_trials_EM (X_All_labels, label_classes, $/;"	f
get_alfa_matrix	Old Code/HMM_libfunc.py	/^def get_alfa_matrix( I,N,T, A,B,pi,data ):$/;"	f
get_alfa_matrix_log	EM/HMM_libfunc.py	/^def get_alfa_matrix_log(data, pi, A,theta,distribution, loglike = None):$/;"	f
get_alfa_matrix_log	Old Code/HMM_libfunc.py	/^def get_alfa_matrix_log( I,N,T, A,B,pi,data ):$/;"	f
get_alfa_matrix_log	Old Code/HMM_libfunc2_old.py	/^def get_alfa_matrix_log( A,B,pi,data ):$/;"	f
get_allPaths	libs/utilities_lib.py	/^def get_allPaths(rootFolder, fullpath = "yes"):$/;"	f
get_average_from_train	utils/data_preprocessing.py	/^def get_average_from_train(Nclasses, X_train_notNormalized, y_train,$/;"	f
get_axes	libs/graph/graph_axes.py	/^def get_axes(self):$/;"	f
get_axes	libs/graph/graph_lib.py	/^    get_axes = graxes.get_axes$/;"	v	class:CGraph
get_axes	libs/graph/graph_setting (copy).py	/^def get_axes(self):$/;"	f
get_barwidth	libs/graph/graph_lib.py	/^    get_barwidth = grset.get_barwidth$/;"	v	class:CGraph
get_barwidth	libs/graph/graph_setting (copy).py	/^def get_barwidth(self,X, width):$/;"	f
get_barwidth	libs/graph/graph_setting.py	/^def get_barwidth(self,X, width = -1):$/;"	f
get_beta_matrix	Old Code/HMM_libfunc.py	/^def  get_beta_matrix( I,N,T, A,B,data ):$/;"	f
get_beta_matrix_log	EM/HMM_libfunc.py	/^def  get_beta_matrix_log( data, pi, A,theta, distribution, loglike = None):$/;"	f
get_beta_matrix_log	Old Code/HMM_libfunc.py	/^def  get_beta_matrix_log( I,N,T, A,B,data ):$/;"	f
get_beta_matrix_log	Old Code/HMM_libfunc2_old.py	/^def  get_beta_matrix_log( A,B,data ):$/;"	f
get_clusters_labels_EM	utils/system_modules.py	/^def get_clusters_labels_EM(Nclasses, X_train, y_train, $/;"	f
get_clusters_labels_HMM	utils/system_modules.py	/^def get_clusters_labels_HMM(Nclasses, X_train, y_train, Ks_params = None,$/;"	f
get_color	libs/graph/graph_lib.py	/^    get_color = grset.get_color$/;"	v	class:CGraph
get_color	libs/graph/graph_setting (copy).py	/^def get_color(self, color):$/;"	f
get_color	libs/graph/graph_setting.py	/^def get_color(self, color = None):$/;"	f
get_corrMatrix	libs/basicMathlib.py	/^def get_corrMatrix(returns):$/;"	f
get_covMatrix	libs/basicMathlib.py	/^def get_covMatrix(returns):$/;"	f
get_cp	Old Code/Watson_estimators (copy).py	/^def get_cp(Ndim, kappa):$/;"	f
get_cp_log	Distributions/Gaussian/Gaussian_distribution.py	/^def get_cp_log(Sigma, diagonal = False):$/;"	f
get_cp_log	Distributions/Watson/Watson_distribution.py	/^def get_cp_log(Ndim, kappa):$/;"	f
get_cp_log	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def get_cp_log(p,kappa):$/;"	f
get_cp_log	Old Code/Watson_estimators (copy).py	/^def get_cp_log(Ndim, kappa):$/;"	f
get_cumReturn	libs/basicMathlib.py	/^def get_cumReturn(price_sequences):$/;"	f
get_custersval	Old Code/EM_libfunc_previous.py	/^    def get_custersval(k):$/;"	f	function:get_responsabilityMatrix_log2
get_dates	libs/utilities_lib.py	/^def get_dates(dates_list):$/;"	f
get_eigenDV_ML	Distributions/Watson/Watson_estimators.py	/^def get_eigenDV_ML(X, rk = None):$/;"	f
get_eigenVectorsAndValues	libs/basicMathlib.py	/^def get_eigenVectorsAndValues(X = None, Sigma = None):$/;"	f
get_ellipse_points	libs/basicMathlib.py	/^def get_ellipse_points(center,a,b,phi, num = 100):$/;"	f
get_errorRate	EM/HMM_libfunc.py	/^def get_errorRate(real, pred):$/;"	f
get_errorRate	Old Code/HMM_libfunc2_old.py	/^def get_errorRate(real, pred):$/;"	f
get_fi_matrix	Old Code/HMM_libfunc.py	/^def  get_fi_matrix( I,N,T,A,B, alpha,beta,data ):$/;"	f
get_fi_matrix_log	EM/HMM_libfunc.py	/^def  get_fi_matrix_log( data, A, theta, alpha,beta, distribution, loglike = None):$/;"	f
get_fi_matrix_log	Old Code/HMM_libfunc.py	/^def  get_fi_matrix_log( I,N,T,A,B, alpha,beta,data ):$/;"	f
get_fi_matrix_log	Old Code/HMM_libfunc2_old.py	/^def  get_fi_matrix_log( A,B, alpha,beta,data ):$/;"	f
get_final_probabilities	EM/HMM_libfunc.py	/^def get_final_probabilities(pi,A,N):$/;"	f
get_foldersData	libs/utilities_lib.py	/^def get_foldersData(source = "FxPro"):$/;"	f
get_gamma_matrix	Old Code/HMM_libfunc.py	/^def get_gamma_matrix( I,N,T, alpha,beta ):$/;"	f
get_gamma_matrix_log	EM/HMM_libfunc.py	/^def get_gamma_matrix_log( alpha,beta ):$/;"	f
get_gamma_matrix_log	Old Code/HMM_libfunc.py	/^def get_gamma_matrix_log( I,N,T, alpha,beta ):$/;"	f
get_gamma_matrix_log	Old Code/HMM_libfunc2_old.py	/^def get_gamma_matrix_log( alpha,beta ):$/;"	f
get_gaussian2D_pdf	libs/basicMathlib.py	/^def get_gaussian2D_pdf(data = None, xbins=10j, ybins=10j, mu = None, cov = None, $/;"	f
get_gaussian_ellipse_params	libs/basicMathlib.py	/^def get_gaussian_ellipse_params(X = None, mu = None, Sigma = None, Chi2val = 2.4477):$/;"	f
get_grids	libs/utilities_lib.py	/^def get_grids(X_data, N = [10]):$/;"	f
get_initial_HMM_params_from_EM	EM/HMM_libfunc.py	/^def get_initial_HMM_params_from_EM(EM_params):$/;"	f
get_kappaNewton	Distributions/Watson/Watson_estimators.py	/^def get_kappaNewton(k, args):  # The r is computed outsite$/;"	f
get_kappaNewton	Distributions/Watson/Watson_estimators2.py	/^def get_kappaNewton(k, args):  # The r is computed outsite$/;"	f
get_kappaNewton	Old Code/Watson_estimators (copy).py	/^def get_kappaNewton(k, args):  # The r is computed outsite$/;"	f
get_labels_ave_EM	utils/data_preprocessing.py	/^def get_labels_ave_EM (X_All_labels, label_classes, $/;"	f
get_likelihoods_EM	utils/data_preprocessing.py	/^def get_likelihoods_EM(Xdata,Ks_params):$/;"	f
get_likelihoods_HMM	utils/data_preprocessing.py	/^def get_likelihoods_HMM(Xdata,Is_params):$/;"	f
get_likelihoods_byClusters_EM	utils/data_preprocessing.py	/^def get_likelihoods_byClusters_EM(Xdata,Ks_params):$/;"	f
get_likelihoods_byClusters_EM_onlyOwn	utils/data_preprocessing.py	/^def get_likelihoods_byClusters_EM_onlyOwn(Xdata,Ks_params):$/;"	f
get_linearRef	libs/basicMathlib.py	/^def get_linearRef(X,Y):$/;"	f
get_ll_clusters	EM/EM_libfunc.py	/^def get_ll_clusters(X,theta,distribution):$/;"	f
get_loglikelihood	EM POO/CEM.py	/^    def get_loglikelihood(self, X, distribution,theta, model_theta_init):$/;"	m	class:CEM
get_loglikelihood	EM POO/CHMM.py	/^    def get_loglikelihood(data, pi, A,theta, distribution):$/;"	m	class:CHMM
get_loglikelihood	EM/EM_libfunc.py	/^def get_loglikelihood(X,distribution,theta, model_theta,loglike = None):$/;"	f
get_loglikelihood	EM/HMM_libfunc.py	/^def get_loglikelihood(data ,distribution,theta, model_theta,alpha = None):$/;"	f
get_meanMax_trials	ECG mains/old/6.main_data2_noWatson.py	/^def get_meanMax_trials(trials, L = 3):$/;"	f
get_meanMin_trials	ECG mains/old/6.main_data2_noWatson.py	/^def get_meanMin_trials(trials, L = 5):$/;"	f
get_meanRange	libs/basicMathlib.py	/^def get_meanRange(timeSeries, window = 6):$/;"	f
get_model_theta	EM/EM_libfunc.py	/^def get_model_theta(r):$/;"	f
get_model_theta	EM/HMM_libfunc.py	/^def get_model_theta(gamma,fi):$/;"	f
get_normalized_ll_byCluster_EM	utils/system_modules.py	/^def get_normalized_ll_byCluster_EM(X_train, X_test, y_train, y_test, Ks_params):$/;"	f
get_phi	vonMises/vonMisesFisher.py	/^def get_phi(X,pz_x,K,N,p):$/;"	f
get_pi	EM/HMM_libfunc.py	/^def get_pi(gamma):$/;"	f
get_pimix	Old Code/EM_libfunc_previous.py	/^def get_pimix(r):$/;"	f
get_plane_Z	libs/basicMathlib.py	/^def get_plane_Z(grid_x, grid_y, params):$/;"	f
get_r_and_ll	EM/EM_libfunc.py	/^def get_r_and_ll(X,distribution,theta, model_theta, loglike = None):$/;"	f
get_r_and_ll	EM/HMM_libfunc.py	/^def get_r_and_ll(data, distribution, theta, model_theta,loglike = None):$/;"	f
get_r_and_ll	Old Code/EM_libfunc_previous.py	/^def get_r_and_ll(X,distribution,theta, pimix):$/;"	f
get_r_and_ll_old	Old Code/EM_libfunc_previous.py	/^def get_r_and_ll_old(X,theta, pimix):$/;"	f
get_r_and_ll_old2	Old Code/EM_libfunc_previous.py	/^def get_r_and_ll_old2(X,theta, pimix):$/;"	f
get_respons	vonMises/em_module.py	/^def get_respons (X,phi,K):$/;"	f
get_respons_log	vonMises/em_module.py	/^def get_respons_log (X,phi,K):$/;"	f
get_responsabilityMatrix2	Old Code/EM_libfunc_previous.py	/^def get_responsabilityMatrix2(X,theta, pimix):$/;"	f
get_responsabilityMatrix_log	Old Code/EM_libfunc_previous.py	/^def get_responsabilityMatrix_log(X,theta, pimix): $/;"	f
get_responsabilityMatrix_log2	Old Code/EM_libfunc_previous.py	/^def get_responsabilityMatrix_log2(X,theta, pimix):$/;"	f
get_return	libs/basicMathlib.py	/^def get_return(price_sequences, lag = 1, cval = 0):$/;"	f
get_stepValues	libs/utilities_lib.py	/^def get_stepValues(x, y1, y2=0, step_where='pre'):$/;"	f
get_subTraining_list	utils/data_preprocessing.py	/^def get_subTraining_list(li, indexes = [0,1]):$/;"	f
get_sublist	utils/data_preprocessing.py	/^def get_sublist(li, indexes = [0,1]):$/;"	f
get_theta	EM POO/CDistribution.py	/^    def get_theta(self, X, r):$/;"	m	class:CDistributionManager
get_theta	EM/EM_libfunc.py	/^def get_theta(X, r, distribution):$/;"	f
get_theta	EM/HMM_libfunc.py	/^def get_theta(X, gamma, theta, distribution):$/;"	f
get_theta	Old Code/EM_libfunc_previous.py	/^def get_theta(X, r, distribution):$/;"	f
get_timeSeries_average_by_label	utils/data_preprocessing.py	/^def get_timeSeries_average_by_label (X_All_labels, channel_sel = None):$/;"	f
get_timeStamp	libs/utilities_lib.py	/^def get_timeStamp(date):$/;"	f
get_times	libs/utilities_lib.py	/^def get_times(dates_list):$/;"	f
get_vonMissesFisher_muKappa_ML	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^def get_vonMissesFisher_muKappa_ML(X, rk = None, parameters = None):$/;"	f
gf	Distributions/Gaussian/Gaussian_distribution.py	/^import general_func as gf$/;"	i
gf	Distributions/Gaussian/Gaussian_estimators.py	/^import general_func as gf$/;"	i
gf	Distributions/Watson/Watson_distribution.py	/^import general_func as gf$/;"	i
gf	Distributions/Watson/Watson_estimators.py	/^import general_func as gf$/;"	i
gf	Distributions/Watson/Watson_estimators2.py	/^import general_func as gf$/;"	i
gf	Distributions/Watson/Watson_sampling.py	/^import general_func as gf$/;"	i
gf	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import general_func as gf$/;"	i
gf	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import general_func as gf$/;"	i
gf	ECG mains/1.main_Arturo.py	/^import general_func as gf$/;"	i
gf	ECG mains/2.main_Manu.py	/^import general_func as gf$/;"	i
gf	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import general_func as gf$/;"	i
gf	ECG mains/old/6.main_data1 (copy).py	/^import general_func as gf$/;"	i
gf	ECG mains/old/6.main_data1.py	/^import general_func as gf$/;"	i
gf	ECG mains/old/6.main_data2.py	/^import general_func as gf$/;"	i
gf	ECG mains/old/6.main_data2_noWatson.py	/^import general_func as gf$/;"	i
gf	ECG mains/old/7.main_system.py	/^import general_func as gf$/;"	i
gf	EM POO/CDistribution.py	/^import general_func as gf$/;"	i
gf	EM/EM_libfunc.py	/^import general_func as gf $/;"	i
gf	EM/HMM_libfunc.py	/^import general_func as gf$/;"	i
gf	EM/decoder_lib.py	/^import general_func as gf$/;"	i
gf	EM_POO/CDistribution.py	/^import general_func as gf$/;"	i
gf	EM_POO/CEM.py	/^import general_func as gf$/;"	i
gf	EM_POO/CHMM.py	/^import general_func as gf$/;"	i
gf	Library Examples/1.main_TryDistribution.py	/^import general_func as gf$/;"	i
gf	Library Examples/2.main_SamplesGen.py	/^import general_func as gf$/;"	i
gf	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import general_func as gf$/;"	i
gf	Library Examples/3.main_EM_Watson.py	/^import general_func as gf$/;"	i
gf	Library Examples/5.main_CV_Gaussian.py	/^import general_func as gf$/;"	i
gf	Library Examples/5.main_CV_Watson.py	/^import general_func as gf$/;"	i
gf	Old Code/EM_libfunc_previous.py	/^import general_func as gf $/;"	i
gf	Old Code/HMM_libfunc2_old.py	/^import general_func as gf$/;"	i
gf	libs/specific_plotting_func.py	/^import general_func as gf$/;"	i
gf	modules/EMmodule.py	/^import general_func as gf$/;"	i
gf	utils/create_HMM_from_EM_data.py	/^import general_func as gf$/;"	i
gf	utils/data_preprocessing.py	/^import general_func as gf$/;"	i
gf	utils/system_func.py	/^import general_func as gf$/;"	i
gf	utils/system_modules.py	/^import general_func as gf$/;"	i
gknn	ECG mains/old/6.main_data1.py	/^    gknn = sm.get_KNN(Xtrain, Xtest, Ytrain, Ytest)$/;"	v
gl	ECG mains/1.main_Arturo.py	/^from graph_lib import gl$/;"	i
gl	ECG mains/2.main_Manu.py	/^from graph_lib import gl$/;"	i
gl	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^from graph_lib import gl$/;"	i
gl	ECG mains/old/6.main_data1 (copy).py	/^from graph_lib import gl$/;"	i
gl	ECG mains/old/6.main_data1.py	/^from graph_lib import gl$/;"	i
gl	ECG mains/old/6.main_data2.py	/^from graph_lib import gl$/;"	i
gl	ECG mains/old/6.main_data2_noWatson.py	/^from graph_lib import gl$/;"	i
gl	ECG mains/old/7.main_system.py	/^from graph_lib import gl$/;"	i
gl	ECG mains/old/main2.py	/^from graph_lib import gl$/;"	i
gl	EM POO/CDistribution.py	/^from graph_lib import gl$/;"	i
gl	EM_POO/CDistribution.py	/^from graph_lib import gl$/;"	i
gl	EM_POO/CEM.py	/^from graph_lib import gl$/;"	i
gl	EM_POO/CHMM.py	/^from graph_lib import gl$/;"	i
gl	Library Examples/1.main_TryDistribution.py	/^from graph_lib import gl$/;"	i
gl	Library Examples/2.main_SamplesGen.py	/^from graph_lib import gl$/;"	i
gl	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^from graph_lib import gl$/;"	i
gl	Library Examples/3.main_EM_Watson.py	/^from graph_lib import gl$/;"	i
gl	Library Examples/5.main_CV_Gaussian.py	/^from graph_lib import gl$/;"	i
gl	Library Examples/5.main_CV_Watson.py	/^from graph_lib import gl$/;"	i
gl	libs/graph/GUI/graph_GUI_ad (copy).py	/^from graph_lib import gl$/;"	i
gl	libs/graph/graph_lib.py	/^gl = CGraph()$/;"	v
gl	libs/graph/specific/graph_tsa.py	/^from graph_lib import gl$/;"	i
gl	libs/specific_plotting_func.py	/^from graph_lib import gl$/;"	i
gl	utils/create_HMM_from_EM_data.py	/^from graph_lib import gl$/;"	i
gl	utils/data_preprocessing.py	/^from graph_lib import gl$/;"	i
gl	utils/system_func.py	/^from graph_lib import gl$/;"	i
gl	utils/system_modules.py	/^from graph_lib import gl$/;"	i
glsvm	ECG mains/old/6.main_data1.py	/^    glsvm =  sm.get_LSVM(Xtrain, Xtest, Ytrain, Ytest)$/;"	v
gnb	ECG mains/old/6.main_data1.py	/^    gnb = sm.get_GNB(Xtrain, Xtest, Ytrain, Ytest)$/;"	v
good_clusters_EM	ECG mains/old/6.main_data1.py	/^    good_clusters_EM = cosas[2][n_cluster_opt][class_i]$/;"	v
gr3D	libs/graph/graph_lib.py	/^import graph_3D as gr3D$/;"	i
grGUI	libs/graph/graph_lib.py	/^import graph_GUI as grGUI$/;"	i
grad	libs/graph/graph_lib.py	/^import graph_advanced as grad$/;"	i
graphData	libs/graph/GUI/graph_GUI_ad (copy).py	/^def graphData(stockTD,MA1,MA2):$/;"	f
graxes	libs/graph/graph_lib.py	/^import graph_axes as graxes$/;"	i
graxis	libs/graph/graph_lib.py	/^import graph_axis as graxis$/;"	i
grba	libs/graph/GUI/graph_GUI.py	/^import graph_basic as grba$/;"	i
grba	libs/graph/GUI/graph_GUI_ad (copy).py	/^import graph_basic as grba$/;"	i
grba	libs/graph/graph_lib.py	/^import graph_basic as grba$/;"	i
greens	libs/graph/trapyngColors.py	/^greens = [$/;"	v
gridspec	libs/graph/GUI/graph_GUI.py	/^import matplotlib.gridspec as gridspec$/;"	i
gridspec	libs/graph/graph_setting (copy).py	/^import matplotlib.gridspec as gridspec$/;"	i
gridspec	libs/graph/graph_subplots.py	/^import matplotlib.gridspec as gridspec$/;"	i
grpl	libs/graph/graph_lib.py	/^import graph_plots as grpl$/;"	i
grset	libs/graph/graph_lib.py	/^import graph_setting as grset$/;"	i
grsp	libs/graph/graph_lib.py	/^import graph_subplots as grsp$/;"	i
gsvm_rf	ECG mains/old/6.main_data1.py	/^    gsvm_rf =  sm.get_SVM_rf(Xtrain, Xtest, Ytrain, Ytest)$/;"	v
gsvml	ECG mains/old/6.main_data2_noWatson.py	/^    gsvml = GridSearchCV(SVC(class_weight='balanced'),param_grid_linear, scoring = acc_scorer,cv = stkfold, refit = True,n_jobs=-1)$/;"	v
gsvmp	ECG mains/old/6.main_data2_noWatson.py	/^    gsvmp = GridSearchCV(SVC(class_weight='balanced'),param_grid_pol, scoring = acc_scorer,cv = stkfold, refit = True,n_jobs=-1)$/;"	v
gsvmr	ECG mains/old/6.main_data2_noWatson.py	/^    gsvmr = GridSearchCV(SVC(class_weight='balanced'),param_grid_rbf, scoring =acc_scorer,cv = stkfold, refit = True,n_jobs=-1)$/;"	v
gtree	ECG mains/old/6.main_data2_noWatson.py	/^    gtree = GridSearchCV(DecisionTreeClassifier(),param_grid,scoring='precision',cv=4,refit=True,n_jobs=-1)$/;"	v
h	libs/utilities_lib.py	/^h = 6   # Height of the images$/;"	v
hide	libs/graph/GUI/graph_GUI.py	/^    def hide(event):$/;"	f	function:pene
hide	libs/graph/GUI/graph_GUI.py	/^    def hide(label):$/;"	f	function:add_hidebox
hide_xaxis	libs/graph/graph_axis.py	/^def hide_xaxis(self, ax = None):$/;"	f
hide_xaxis	libs/graph/graph_lib.py	/^    hide_xaxis =  graxis.hide_xaxis$/;"	v	class:CGraph
hide_xaxis	libs/graph/graph_setting (copy).py	/^def hide_xaxis(self, ax = None):$/;"	f
hide_yaxis	libs/graph/graph_axis.py	/^def hide_yaxis(self, ax = None):$/;"	f
hide_yaxis	libs/graph/graph_lib.py	/^    hide_yaxis =  graxis.hide_yaxis$/;"	v	class:CGraph
histogram	libs/graph/graph_advanced.py	/^def histogram(self, X,  bins = 20, orientation = "vertical",$/;"	f
histogram	libs/graph/graph_lib.py	/^    histogram = grad.histogram$/;"	v	class:CGraph
hyp1f1	Distributions/Gaussian/Gaussian_estimators.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	Distributions/Watson/Watson_estimators.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	Distributions/Watson/Watson_estimators2.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	Distributions/Watson/Watson_sampling.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	Distributions/Watson/Watson_samplingMartin.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	Distributions/Watson/sampler_lib.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	ECG mains/old/caca.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	ECG mains/old/main2.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	EM/EM_libfunc.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	Old Code/EM_libfunc_previous.py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	Old Code/Watson_estimators (copy).py	/^from scipy.special import hyp1f1$/;"	i
hyp1f1	utils/general_func.py	/^from scipy.special import hyp1f1$/;"	i
i0	ECG mains/old/6.main_data1 (copy).py	/^    i0 = 0  # For selecting subset of dimensions$/;"	v
i0	ECG mains/old/6.main_data2.py	/^    i0 = 50  # Good one !!$/;"	v
ifold	ECG mains/2.main_Manu.py	/^                ifold = ifold + 1$/;"	v
ifold	ECG mains/2.main_Manu.py	/^            ifold = 1$/;"	v
ifold	Library Examples/5.main_CV_Gaussian.py	/^                ifold = ifold + 1$/;"	v
ifold	Library Examples/5.main_CV_Gaussian.py	/^            ifold = 1$/;"	v
ifold	Library Examples/5.main_CV_Watson.py	/^                ifold = ifold + 1$/;"	v
ifold	Library Examples/5.main_CV_Watson.py	/^            ifold = 1$/;"	v
imageio	libs/utilities_lib.py	/^import imageio$/;"	i
images_path	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    images_path = ul.get_allPaths(folder_images_gif, fullpath = "no")$/;"	v
import_folders	Distributions/Gaussian/Gaussian_distribution.py	/^import import_folders$/;"	i
import_folders	Distributions/Gaussian/Gaussian_estimators.py	/^import import_folders$/;"	i
import_folders	Distributions/Watson/Watson_estimators.py	/^import import_folders$/;"	i
import_folders	Distributions/Watson/Watson_estimators2.py	/^import import_folders$/;"	i
import_folders	Distributions/Watson/Watson_sampling.py	/^import import_folders$/;"	i
import_folders	ECG mains/1.main_Arturo.py	/^import import_folders$/;"	i
import_folders	ECG mains/2.main_Manu.py	/^import import_folders$/;"	i
import_folders	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import import_folders$/;"	i
import_folders	ECG mains/old/6.main_data1 (copy).py	/^import import_folders$/;"	i
import_folders	ECG mains/old/6.main_data1.py	/^import import_folders$/;"	i
import_folders	ECG mains/old/6.main_data2.py	/^import import_folders$/;"	i
import_folders	ECG mains/old/6.main_data2_noWatson.py	/^import import_folders$/;"	i
import_folders	ECG mains/old/7.main_system.py	/^import import_folders$/;"	i
import_folders	ECG mains/old/main2.py	/^import import_folders$/;"	i
import_folders	EM_POO/CHMM.py	/^import import_folders$/;"	i
import_folders	Library Examples/1.main_TryDistribution.py	/^import import_folders$/;"	i
import_folders	Library Examples/2.main_SamplesGen.py	/^import import_folders$/;"	i
import_folders	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import import_folders$/;"	i
import_folders	Library Examples/3.main_EM_Watson.py	/^import import_folders$/;"	i
import_folders	Library Examples/5.main_CV_Gaussian.py	/^import import_folders$/;"	i
import_folders	Library Examples/5.main_CV_Watson.py	/^import import_folders$/;"	i
import_folders	Old Code/Watson_estimators (copy).py	/^import import_folders$/;"	i
import_folders	modules/EMmodule.py	/^import import_folders$/;"	i
import_folders	utils/create_HMM_from_EM_data.py	/^import import_folders$/;"	i
import_folders	utils/data_preprocessing.py	/^import import_folders$/;"	i
import_folders	utils/general_func.py	/^import import_folders$/;"	i
import_folders	utils/system_func.py	/^import import_folders$/;"	i
import_folders	utils/system_modules.py	/^import import_folders$/;"	i
index	vonMises/data/outputs/visualization.py	/^index = [x for x in df.index]$/;"	v
init_WidgetData	libs/graph/graph_lib.py	/^    init_WidgetData = grset.init_WidgetData$/;"	v	class:CGraph
init_WidgetData	libs/graph/graph_setting.py	/^def init_WidgetData(self, initX = None, ws =  None):$/;"	f
init_figure	libs/graph/graph_basic.py	/^def init_figure(self, projection = "2d", position = [], subplotting = 0):$/;"	f
init_figure	libs/graph/graph_lib.py	/^    init_figure = grba.init_figure$/;"	v	class:CGraph
init_figure	libs/graph/graph_setting (copy).py	/^def init_figure(self, projection = "2d", position = [], subplotting = 0):$/;"	f
init_model_params	EM/EM_libfunc.py	/^def init_model_params(K,model_theta = None):$/;"	f
init_model_params	EM/HMM_libfunc.py	/^def init_model_params(I,model_theta_init = None):$/;"	f
init_model_params	Old Code/EM_libfunc_previous.py	/^def init_model_params(K,pi_init = None):$/;"	f
init_params	Distributions/Gaussian/Gaussian_distribution.py	/^def init_params(X,K ,theta_init = None, parameters = None):$/;"	f
init_params	Distributions/Watson/Watson_distribution.py	/^def init_params(X, K, theta_init = None, parameters = None):$/;"	f
init_params	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def init_params(X, K, theta_init = None, parameters = None):$/;"	f
init_params	EM POO/CDistribution.py	/^    def init_params(X,K, theta_init = None, parameters = None):$/;"	m	class:CDistribution
init_params	EM POO/CDistribution.py	/^    def init_params(self, X, theta_init):        $/;"	m	class:CDistributionManager
init_params	vonMises/vonMisesFisher.py	/^def init_params(K,p):$/;"	f
init_variables	libs/graph/graph_basic.py	/^def init_variables(self,w = 20, h = 12, lw = 2):$/;"	f
init_variables	libs/graph/graph_lib.py	/^    init_variables = grba.init_variables$/;"	v	class:CGraph
init_variables	libs/graph/graph_setting (copy).py	/^def init_variables(self,w = 20, h = 12, lw = 2):$/;"	f
init_with_EM	ECG mains/old/6.main_data2_noWatson.py	/^    init_with_EM = 0  # Flag to init with the EM$/;"	v
interpolate	Distributions/Watson/sampler_lib.py	/^import scipy.interpolate as interpolate$/;"	i
io	ECG mains/old/6.main_data1 (copy).py	/^import scipy.io$/;"	i
io	ECG mains/old/6.main_data1.py	/^import scipy.io$/;"	i
io	ECG mains/old/6.main_data2.py	/^import scipy.io$/;"	i
io	ECG mains/old/6.main_data2_noWatson.py	/^import scipy.io$/;"	i
io	ECG mains/old/7.main_system.py	/^import scipy.io$/;"	i
io	utils/data_preprocessing.py	/^import scipy.io$/;"	i
io	utils/system_func.py	/^import scipy.io$/;"	i
io	utils/system_modules.py	/^import scipy.io$/;"	i
isnan	vonMises/em_module.py	/^    from math import isnan$/;"	i
iv	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^from scipy.special import ive,iv$/;"	i
iv	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^from scipy.special import ive,iv$/;"	i
iv	vonMises/main.py	/^from scipy.special import ive,iv$/;"	i
iv	vonMises/vonMisesFisher.py	/^from scipy.special import ive,iv$/;"	i
ive	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^from scipy.special import ive,iv$/;"	i
ive	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^from scipy.special import ive,iv$/;"	i
ive	vonMises/main.py	/^from scipy.special import ive,iv$/;"	i
ive	vonMises/vonMisesFisher.py	/^from scipy.special import ive,iv$/;"	i
k	Distributions/Watson/Watson_samplingMartin.py	/^k=35$/;"	v
k	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        k = myDManager.clusterk_to_thetak[k_c]$/;"	v
k	Library Examples/3.main_EM_Watson.py	/^            k = myDManager.clusterk_to_thetak[k_c]$/;"	v
k	Library Examples/3.main_EM_Watson.py	/^        k = myDManager.clusterk_to_thetak[k_c]$/;"	v
k	Library Examples/3.main_EM_Watson.py	/^    k = 0 # For the initial$/;"	v
kappa	ECG mains/old/caca.py	/^kappa = 40$/;"	v
kappa	ECG mains/old/main2.py	/^kappa = 4$/;"	v
kappa	ECG mains/old/main2.py	/^kappa = 4.0 # mean and dispersion$/;"	v
kappa	Library Examples/1.main_TryDistribution.py	/^    kappa = 20  # "Variance" of the circular multivariate guassian$/;"	v
kappa	Library Examples/1.main_TryDistribution.py	/^kappa = 15   # "Variance" of the circular multivariate guassian$/;"	v
kappa	Library Examples/2.main_SamplesGen.py	/^    kappa = - kappa$/;"	v
kappa	Library Examples/2.main_SamplesGen.py	/^    kappa = 20$/;"	v
kappa	Library Examples/2.main_SamplesGen.py	/^    kappa = 50 + np.random.rand(1) * 50$/;"	v
kappa	Library Examples/2.main_SamplesGen.py	/^    kappa = Wae.get_MLkappa(mu, RandWatson)$/;"	v
kappa	Library Examples/2.main_SamplesGen.py	/^    kappa = Wae.get_MLkappa(mu, Xdata)$/;"	v
kappa	Library Examples/2.main_SamplesGen.py	/^    kappa = Wae.get_MLkappa(mu, Xdata_k)$/;"	v
kappa_est	Library Examples/1.main_TryDistribution.py	/^    kappa_est = Wae.get_MLkappa(mu_est, RandWatson)$/;"	v
kappa_max_distribution	ECG mains/2.main_Manu.py	/^    kappa_max_distribution = 1000;$/;"	v
kappa_max_distribution	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    kappa_max_distribution = 1000;$/;"	v
kappa_max_estimation	ECG mains/2.main_Manu.py	/^    kappa_max_estimation = 1000$/;"	v
kappa_max_estimation	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    kappa_max_estimation = 1000$/;"	v
kappa_max_init	ECG mains/2.main_Manu.py	/^    kappa_max_init = 50;$/;"	v
kappa_max_init	ECG mains/2.main_Manu.py	/^    kappa_max_init = 90;$/;"	v
kappa_max_init	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    kappa_max_init = 100;$/;"	v
kappas	ECG mains/old/caca.py	/^kappas = [45, 34, 10]$/;"	v
kde2D	libs/basicMathlib.py	/^def kde2D(x, y, bandwidth, xbins=10j, ybins=10j, **kwargs): $/;"	f
kde_sklearn	libs/basicMathlib.py	/^def kde_sklearn(x, x_grid, bandwidth=0.2, **kwargs):$/;"	f
keys	ECG mains/old/6.main_data1 (copy).py	/^    keys = mat.keys()$/;"	v
keys	ECG mains/old/6.main_data2.py	/^keys = mat.keys()$/;"	v
keys	libs/utilities_lib.py	/^keys = ['Open', 'High', 'Low', 'Close', 'Volume']$/;"	v
keys_col	libs/utilities_lib.py	/^keys_col = ['Symbol','Type','Size','TimeOpen','PriceOpen', 'Comision','CurrentPrice','Profit']$/;"	v
kflag	Library Examples/3.main_EM_Watson.py	/^            kflag = 1$/;"	v
kflag	Library Examples/3.main_EM_Watson.py	/^    kflag = 0$/;"	v
kflag	utils/create_HMM_from_EM_data.py	/^kflag = 0$/;"	v
kummer_log	Distributions/Watson/Watson_distribution.py	/^def kummer_log(a,b,x):$/;"	f
kummer_log	Old Code/Watson_estimators (copy).py	/^def kummer_log(a,b,x):$/;"	f
kummer_own_log	Distributions/Watson/Watson_distribution.py	/^def kummer_own_log(a,b,x):$/;"	f
label_classes	ECG mains/old/6.main_data1 (copy).py	/^    label_classes = ["Famous", "Unfamiliar", "Scrambled"]$/;"	v
label_classes	ECG mains/old/6.main_data1.py	/^    label_classes = [label_classes[0], label_classes[2]]$/;"	v
label_classes	ECG mains/old/6.main_data2.py	/^label_classes = ["Famous", "Unfamiliar", "Scrambled"]$/;"	v
label_classes	ECG mains/old/6.main_data2.py	/^label_classes = [label_classes[0], label_classes[2]]$/;"	v
label_classes	ECG mains/old/6.main_data2_noWatson.py	/^    label_classes = [label_classes[0], label_classes[2]]$/;"	v
label_classes	ECG mains/old/7.main_system.py	/^label_classes = [label_classes[0], label_classes[2]]$/;"	v
label_numbers	ECG mains/old/6.main_data1 (copy).py	/^    label_numbers = range(Nclasses)$/;"	v
label_trials	ECG mains/old/6.main_data1 (copy).py	/^        label_trials = trial_indices[label].flatten()$/;"	v
label_trials	ECG mains/old/6.main_data2.py	/^    label_trials = trial_indices[label].flatten()$/;"	v
labels	ECG mains/2.main_Manu.py	/^                labels = ["Validation of Number of clusters LOO 16 people. EM.","Number of clusters (K)","Average LL of a chain"], $/;"	v
labels	ECG mains/2.main_Manu.py	/^            labels = ["Validation of Number of clusters LOO 16 people. HMM.","Number of states (I)","Average LL of a chain"], $/;"	v
labels	ECG mains/old/6.main_data1.py	/^    labels = ["Validation of Number of clusters with LL","Number of clusters (K)","LL"], $/;"	v
labels	Library Examples/1.main_TryDistribution.py	/^            labels = ["Watson Distribution", "Angle(rad)", "pdf"],$/;"	v
labels	Library Examples/1.main_TryDistribution.py	/^        labels = ["Circle"],$/;"	v
labels	Library Examples/1.main_TryDistribution.py	/^        labels = ["Watson Distribution", "Angle(rad)", "pdf"], nf = 1, na = 1)$/;"	v
labels	Library Examples/1.main_TryDistribution.py	/^        labels = ["Watson Distribution", "Angle(rad)", "pdf"],$/;"	v
labels	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        labels = ["Convergence of LL with generated data","Iterations","LL"], $/;"	v
labels	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    labels = ["Convergence of LL with generated data","Iterations","LL"], $/;"	v
labels	Library Examples/3.main_EM_Watson.py	/^    labels = ["Convergence of LL with generated data","Iterations","LL"], $/;"	v
labels	Library Examples/5.main_CV_Gaussian.py	/^        labels = ["Validation of Number of clusters for a %i-CV EM."%Nfolds,"Number of clusters (K)","Average LL of a sample"], $/;"	v
labels	Library Examples/5.main_CV_Watson.py	/^        labels = ["Validation of Number of clusters for a %i-CV EM."%Nfolds,"Number of clusters (K)","Average LL of a sample"], $/;"	v
lda	ECG mains/old/6.main_data1.py	/^    lda =  sm.get_LDA(Xtrain, Xtest, Ytrain, Ytest)$/;"	v
lda	ECG mains/old/6.main_data2_noWatson.py	/^    lda = LDA()$/;"	v
legend	ECG mains/2.main_Manu.py	/^                legend = ["Mean Validation LL (EM)"], lw = 3)$/;"	v
legend	ECG mains/2.main_Manu.py	/^            legend = ["Mean Validation LL (HMM)"], lw = 3)$/;"	v
legend	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^            legend = ["HMM LogLikelihood"], $/;"	v
legend	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        legend = ["EM LogLikelihood"], $/;"	v
legend	ECG mains/old/6.main_data1.py	/^            legend = ["Train EM"], $/;"	v
legend	ECG mains/old/6.main_data1.py	/^            legend = ["Train HMM"], $/;"	v
legend	ECG mains/old/6.main_data1.py	/^            legend = ["Validation EM"], $/;"	v
legend	ECG mains/old/6.main_data1.py	/^            legend = ["Validation HMM"], $/;"	v
legend	Library Examples/1.main_TryDistribution.py	/^            legend = ["pdf k:%f, mu_angle: %f"%(kappa,mu_angle)], $/;"	v
legend	Library Examples/1.main_TryDistribution.py	/^        legend = ["pdf k:%f, mu_angle: %f"%(kappa,mu_angle)], $/;"	v
legend	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^                legend = ["HMM LogLikelihood"], $/;"	v
legend	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^            legend = ["EM LogLikelihood"], $/;"	v
legend	Library Examples/3.main_EM_Watson.py	/^            legend = ["EM LogLikelihood"], $/;"	v
legend	Library Examples/5.main_CV_Gaussian.py	/^        legend = ["Mean Validation LL (EM)"], lw = 3)$/;"	v
legend	Library Examples/5.main_CV_Watson.py	/^        legend = ["Mean Validation LL (EM)"], lw = 3)$/;"	v
likeli	ECG mains/old/6.main_data1 (copy).py	/^            likeli = []$/;"	v
linear_model	libs/basicMathlib.py	/^from sklearn import linear_model$/;"	i
linear_model	libs/graph/specific/graph_tsa.py	/^from sklearn import linear_model$/;"	i
listdir	ECG mains/1.main_Arturo.py	/^    from os import listdir$/;"	i
listdir	utils/general_func.py	/^    from os import listdir$/;"	i
listdir	vonMises/main.py	/^    from os import listdir$/;"	i
ll	ECG mains/old/6.main_data1 (copy).py	/^                ll = EMlf.get_EM_Incomloglike_log(Ks_params[K_p_i][1],Ks_params[K_p_i][0],X_test[trial_i])$/;"	v
ll	ECG mains/old/6.main_data1 (copy).py	/^                ll = EMlf.get_EM_Incomloglike_log(Ks_params[K_p_i][1],Ks_params[K_p_i][0],X_train[trial_i])$/;"	v
ll	ECG mains/old/6.main_data1 (copy).py	/^                ll = HMMlf.get_HMM_Incomloglike(Is_params[K_p_i][1],  # A,B,pi$/;"	v
ll	Library Examples/5.main_CV_Gaussian.py	/^    ll = Gad.Gaussian_pdf_log (X1, [mu1,cov1])$/;"	v
ll2	Library Examples/5.main_CV_Gaussian.py	/^    ll2 = []$/;"	v
ll2	Library Examples/5.main_CV_Gaussian.py	/^    ll2 = np.array(ll2).reshape(ll.shape)$/;"	v
ll_K	Library Examples/5.main_CV_Gaussian.py	/^    ll_K = Gad.Gaussian_K_pdf_log(X1, [[mu1,cov1],[mu2,cov2]])$/;"	v
ll_test	ECG mains/old/6.main_data1.py	/^    ll_test = culo[1]$/;"	v
ll_tr_params_folds	ECG mains/2.main_Manu.py	/^            ll_tr_params_folds = []$/;"	v
ll_tr_params_folds	Library Examples/5.main_CV_Gaussian.py	/^            ll_tr_params_folds = []$/;"	v
ll_tr_params_folds	Library Examples/5.main_CV_Watson.py	/^            ll_tr_params_folds = []$/;"	v
ll_train	ECG mains/old/6.main_data1.py	/^    ll_train = culo[0]$/;"	v
ll_val_params_folds	ECG mains/2.main_Manu.py	/^            ll_val_params_folds = []$/;"	v
ll_val_params_folds	Library Examples/5.main_CV_Gaussian.py	/^            ll_val_params_folds = []$/;"	v
ll_val_params_folds	Library Examples/5.main_CV_Watson.py	/^            ll_val_params_folds = []$/;"	v
load_EM_data	EM_POO/CDistribution.py	/^load_EM_data = 1$/;"	v
load_EM_data	EM_POO/CEM.py	/^load_EM_data = 1$/;"	v
load_EM_data	Library Examples/3.main_EM_Watson.py	/^load_EM_data = 0$/;"	v
load_ERG_data	ECG mains/2.main_Manu.py	/^load_ERG_data = 1  # To load the data from the HMM structure$/;"	v
load_ERG_data	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^load_ERG_data = 1  # To load the data from the HMM structure$/;"	v
load_HMM_data	EM_POO/CDistribution.py	/^load_HMM_data = 0$/;"	v
load_HMM_data	EM_POO/CEM.py	/^load_HMM_data = 0$/;"	v
load_HMM_data	Library Examples/3.main_EM_Watson.py	/^load_HMM_data = 1$/;"	v
load_HMM_data	Library Examples/5.main_CV_Watson.py	/^load_HMM_data = 1  # To load the data from the HMM structure$/;"	v
load_dataset	ECG mains/old/6.main_data1 (copy).py	/^load_dataset = 0$/;"	v
load_dataset	ECG mains/old/6.main_data1.py	/^load_dataset = 1$/;"	v
load_dataset	ECG mains/old/6.main_data2_noWatson.py	/^load_dataset = 1$/;"	v
load_fake_data	ECG mains/1.main_Arturo.py	/^def load_fake_data(path = 'data\/'):$/;"	f
load_fake_data	utils/general_func.py	/^def load_fake_data(path = 'data\/'):$/;"	f
load_fake_data	vonMises/main.py	/^def load_fake_data(path = 'data\/'):$/;"	f
load_one_person_dataset	utils/data_preprocessing.py	/^def load_one_person_dataset(dataset_folder = ".\/dataset\/", filename = 'face_scrambling_spm8proc_sub07.mat'):$/;"	f
load_pickle	libs/pickle_lib.py	/^def load_pickle (filename, partitions = 1, verbose = 0):$/;"	f
load_real_data	ECG mains/1.main_Arturo.py	/^def load_real_data(path = 'data\/',file_name='face_scrambling_ERP.mat'):$/;"	f
load_real_data	utils/general_func.py	/^def load_real_data(path = 'data\/',file_name='face_scrambling_ERP.mat'):$/;"	f
load_real_data	vonMises/main.py	/^def load_real_data(path = 'data\/',file_name='face_scrambling_ERP.mat'):$/;"	f
loading_precomputed_centroids	ECG mains/old/6.main_data1.py	/^loading_precomputed_centroids = 1$/;"	v
logl_tr_CV_i	ECG mains/2.main_Manu.py	/^        logl_tr_CV_i = []   # List the LL values for a single CV, for all clusters and Nfolds. [NKluters] = [LL_fold1, LL_fold2,....]]$/;"	v
logl_tr_CV_i	Library Examples/5.main_CV_Gaussian.py	/^        logl_tr_CV_i = []   # List the LL values for a single CV, for all clusters and Nfolds. [NKluters] = [LL_fold1, LL_fold2,....]]$/;"	v
logl_tr_CV_i	Library Examples/5.main_CV_Watson.py	/^        logl_tr_CV_i = []   # List the LL values for a single CV, for all clusters and Nfolds. [NKluters] = [LL_fold1, LL_fold2,....]]$/;"	v
logl_tr_CVs	ECG mains/2.main_Manu.py	/^    logl_tr_CVs = []  # List of the training LL of all CVs   [nCVs]$/;"	v
logl_tr_CVs	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    logl_tr_CVs = []  # List of the training LL of all CVs   [nCVs]$/;"	v
logl_tr_CVs	Library Examples/5.main_CV_Gaussian.py	/^    logl_tr_CVs = []  # List of the training LL of all CVs   [nCVs]$/;"	v
logl_tr_CVs	Library Examples/5.main_CV_Gaussian.py	/^    logl_tr_CVs = logl_tr_CVs_EM_save_for_later$/;"	v
logl_tr_CVs	Library Examples/5.main_CV_Watson.py	/^    logl_tr_CVs = []  # List of the training LL of all CVs   [nCVs]$/;"	v
logl_tr_CVs	Library Examples/5.main_CV_Watson.py	/^    logl_tr_CVs = logl_tr_CVs_EM_save_for_later$/;"	v
logl_tr_CVs_EM_save_for_later	ECG mains/2.main_Manu.py	/^    logl_tr_CVs_EM_save_for_later = copy.deepcopy(logl_tr_CVs)$/;"	v
logl_tr_CVs_EM_save_for_later	Library Examples/5.main_CV_Gaussian.py	/^    logl_tr_CVs_EM_save_for_later = copy.deepcopy(logl_tr_CVs)$/;"	v
logl_tr_CVs_EM_save_for_later	Library Examples/5.main_CV_Watson.py	/^    logl_tr_CVs_EM_save_for_later = copy.deepcopy(logl_tr_CVs)$/;"	v
logl_tr_CVs_HMM_save_for_later	ECG mains/2.main_Manu.py	/^    logl_tr_CVs_HMM_save_for_later = copy.deepcopy(logl_tr_CVs)$/;"	v
logl_val_CV_i	ECG mains/2.main_Manu.py	/^        logl_val_CV_i = []  # List the LL values for a single CV, for all clusters and Nfolds. [NKluters] = [LL_fold1, LL_fold2,....]]$/;"	v
logl_val_CV_i	Library Examples/5.main_CV_Gaussian.py	/^        logl_val_CV_i = []  # List the LL values for a single CV, for all clusters and Nfolds. [NKluters] = [LL_fold1, LL_fold2,....]]$/;"	v
logl_val_CV_i	Library Examples/5.main_CV_Watson.py	/^        logl_val_CV_i = []  # List the LL values for a single CV, for all clusters and Nfolds. [NKluters] = [LL_fold1, LL_fold2,....]]$/;"	v
logl_val_CVs	ECG mains/2.main_Manu.py	/^    logl_val_CVs = [] # List of the validation LL of all CVs   [nCVs]$/;"	v
logl_val_CVs	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    logl_val_CVs = [] # List of the validation LL of all CVs   [nCVs]$/;"	v
logl_val_CVs	Library Examples/5.main_CV_Gaussian.py	/^    logl_val_CVs = [] # List of the validation LL of all CVs   [nCVs]$/;"	v
logl_val_CVs	Library Examples/5.main_CV_Gaussian.py	/^    logl_val_CVs = logl_val_CVs_EM_save_for_later$/;"	v
logl_val_CVs	Library Examples/5.main_CV_Watson.py	/^    logl_val_CVs = [] # List of the validation LL of all CVs   [nCVs]$/;"	v
logl_val_CVs	Library Examples/5.main_CV_Watson.py	/^    logl_val_CVs = logl_val_CVs_EM_save_for_later$/;"	v
logl_val_CVs_EM_save_for_later	ECG mains/2.main_Manu.py	/^    logl_val_CVs_EM_save_for_later = copy.deepcopy(logl_val_CVs)$/;"	v
logl_val_CVs_EM_save_for_later	Library Examples/5.main_CV_Gaussian.py	/^    logl_val_CVs_EM_save_for_later = copy.deepcopy(logl_val_CVs)$/;"	v
logl_val_CVs_EM_save_for_later	Library Examples/5.main_CV_Watson.py	/^    logl_val_CVs_EM_save_for_later = copy.deepcopy(logl_val_CVs)$/;"	v
logl_val_CVs_HMM_save_for_later	ECG mains/2.main_Manu.py	/^    logl_val_CVs_HMM_save_for_later = copy.deepcopy(logl_val_CVs)$/;"	v
loglikelihood	vonMises/em_module.py	/^def loglikelihood(X,phi):$/;"	f
loglikelihood_log	vonMises/em_module.py	/^def loglikelihood_log(X,phi):$/;"	f
lr	ECG mains/old/6.main_data1.py	/^    lr =  sm.get_LogReg(Xtrain, Xtest, Ytrain, Ytest)$/;"	v
lr	ECG mains/old/6.main_data2_noWatson.py	/^    lr = LogisticRegression()$/;"	v
ls	Library Examples/1.main_TryDistribution.py	/^        ls = "--")   $/;"	v
lw	ECG mains/old/6.main_data1.py	/^    lw = 4,$/;"	v
lw	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        lw = 2)$/;"	v
lw	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    lw = 2)$/;"	v
lw	Library Examples/3.main_EM_Watson.py	/^    lw = 2)$/;"	v
main	ECG mains/1.main_Arturo.py	/^def main ():$/;"	f
main	vonMises/main.py	/^def main():$/;"	f
make	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
make	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
make_scorer	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
make_scorer	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
manage_axes	libs/graph/graph_axes.py	/^def manage_axes(self, na = 0, $/;"	f
manage_axes	libs/graph/graph_lib.py	/^    manage_axes = graxes.manage_axes$/;"	v	class:CGraph
manage_axes	libs/graph/graph_setting (copy).py	/^def manage_axes(self, na = 0, ax = None, position = [], projection = "2d"):$/;"	f
manage_clusters	EM POO/CDistribution.py	/^    def manage_clusters(self, X, r, theta_prev, theta_new):$/;"	m	class:CDistributionManager
manage_clusters	EM/EM_libfunc.py	/^def manage_clusters(X,r, distribution, model_theta, theta_new, theta_prev):$/;"	f
manage_clusters	EM/HMM_libfunc.py	/^def manage_clusters(data,gamma, distribution, $/;"	f
manage_clusters	Old Code/EM_libfunc_previous.py	/^def manage_clusters(X,r, distribution, pimix, theta_new, theta_prev, deged_est_params = None, deged_params = None):$/;"	f
mat	ECG mains/old/6.main_data1 (copy).py	/^    mat = scipy.io.loadmat(dataset_folder +'face_scrambling_spm8proc_sub07.mat')$/;"	v
mat	ECG mains/old/6.main_data2.py	/^mat = scipy.io.loadmat(dataset_folder +'face_scrambling_spm8proc_sub07.mat')$/;"	v
match_clusters	EM/HMM_libfunc.py	/^def match_clusters(mus_1, kappas_1, mus_2, kappas_2):$/;"	f
match_clusters	Old Code/HMM_libfunc2_old.py	/^def match_clusters(mus_1, kappas_1, mus_2, kappas_2):$/;"	f
math	Distributions/Watson/Watson_samplingMartin.py	/^import math$/;"	i
math	libs/basicMathlib.py	/^import math$/;"	i
matplotlib	Distributions/Watson/Watson_samplingMartin.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/1.main_Arturo.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/2.main_Manu.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/old/6.main_data1 (copy).py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/old/6.main_data1.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/old/6.main_data2.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/old/6.main_data2_noWatson.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/old/7.main_system.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ECG mains/old/main2.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	EM POO/CDistribution.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	EM_POO/CDistribution.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	EM_POO/CEM.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	EM_POO/CHMM.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	Library Examples/1.main_TryDistribution.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	Library Examples/2.main_SamplesGen.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	Library Examples/3.main_EM_Watson.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	Library Examples/5.main_CV_Gaussian.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	Library Examples/5.main_CV_Watson.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/basicMathlib.py	/^import matplotlib.colors as ColCon$/;"	i
matplotlib	libs/basicMathlib.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/GUI/graph_GUI.py	/^import matplotlib.gridspec as gridspec$/;"	i
matplotlib	libs/graph/GUI/graph_GUI.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/GUI/graph_GUI_ad (copy).py	/^import matplotlib$/;"	i
matplotlib	libs/graph/GUI/graph_GUI_ad (copy).py	/^import matplotlib.dates as mdates$/;"	i
matplotlib	libs/graph/GUI/graph_GUI_ad (copy).py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/GUI/graph_GUI_ad (copy).py	/^import matplotlib.ticker as mticker$/;"	i
matplotlib	libs/graph/graph_3D.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_advanced.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_axes.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_axis.py	/^import matplotlib.dates as mdates$/;"	i
matplotlib	libs/graph/graph_axis.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_axis.py	/^import matplotlib.ticker as mticker$/;"	i
matplotlib	libs/graph/graph_basic.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_plots.py	/^import matplotlib.dates as mdates$/;"	i
matplotlib	libs/graph/graph_plots.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_setting (copy).py	/^import matplotlib.dates as mdates$/;"	i
matplotlib	libs/graph/graph_setting (copy).py	/^import matplotlib.gridspec as gridspec$/;"	i
matplotlib	libs/graph/graph_setting (copy).py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_setting (copy).py	/^import matplotlib.ticker as mticker$/;"	i
matplotlib	libs/graph/graph_setting.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/graph_subplots.py	/^import matplotlib.gridspec as gridspec$/;"	i
matplotlib	libs/graph/graph_subplots.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/specific/graph_tsa.py	/^import matplotlib.colors as ColCon$/;"	i
matplotlib	libs/graph/specific/graph_tsa.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/graph/specific/trading_graphs.py	/^import matplotlib$/;"	i
matplotlib	libs/graph/specific/trading_graphs.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/specific_plotting_func.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	libs/utilities_lib.py	/^import matplotlib.colors as ColCon$/;"	i
matplotlib	libs/utilities_lib.py	/^import matplotlib.dates as mdates$/;"	i
matplotlib	libs/utilities_lib.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	utils/create_HMM_from_EM_data.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	utils/data_preprocessing.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	utils/system_func.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	utils/system_modules.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	vonMises/data/outputs/visualization.py	/^import matplotlib.pyplot as plt$/;"	i
max_correlation_0	ECG mains/old/7.main_system.py	/^    max_correlation_0 = np.max(np.abs(mus_0.dot(mus_1.T)), axis = 0)$/;"	v
max_correlation_1	ECG mains/old/7.main_system.py	/^    max_correlation_1 = np.max(np.abs(mus_0.dot(mus_1.T)), axis = 1)$/;"	v
max_iter	modules/EMmodule.py	/^    max_iter = None$/;"	v	class:EMobj
max_trials	ECG mains/old/6.main_data1 (copy).py	/^    max_trials = 100$/;"	v
max_trials	ECG mains/old/6.main_data1.py	/^    max_trials = 300$/;"	v
max_trials	ECG mains/old/6.main_data2_noWatson.py	/^    max_trials = 500 # Number of trials per class$/;"	v
max_trials	ECG mains/old/7.main_system.py	/^max_trials = 100  # Number of trials per class$/;"	v
maxtest	ECG mains/old/6.main_data2_noWatson.py	/^    maxtest = np.amax(testscores)$/;"	v
maxtrain	ECG mains/old/6.main_data2_noWatson.py	/^    maxtrain = np.amax(trainscores)$/;"	v
mc	libs/graph/graph_advanced.py	/^from matplotlib import collections  as mc$/;"	i
mc	libs/graph/graph_plots.py	/^from matplotlib import collections  as mc$/;"	i
mc	libs/graph/specific/trading_graphs.py	/^from matplotlib import collections  as mc$/;"	i
mdates	libs/graph/GUI/graph_GUI_ad (copy).py	/^import matplotlib.dates as mdates$/;"	i
mdates	libs/graph/graph_axis.py	/^import matplotlib.dates as mdates$/;"	i
mdates	libs/graph/graph_plots.py	/^import matplotlib.dates as mdates$/;"	i
mdates	libs/graph/graph_setting (copy).py	/^import matplotlib.dates as mdates$/;"	i
mdates	libs/utilities_lib.py	/^import matplotlib.dates as mdates$/;"	i
mean	vonMises/em_module.py	/^def mean(alist):$/;"	f
mean_shit	ECG mains/old/6.main_data2.py	/^        mean_shit = np.mean(X_ave, axis = 0).reshape(1,3)$/;"	v
mean_tr_ll	ECG mains/2.main_Manu.py	/^        mean_tr_ll =  []$/;"	v
mean_tr_ll	ECG mains/2.main_Manu.py	/^        mean_tr_ll = np.array(mean_tr_ll)$/;"	v
mean_tr_ll	ECG mains/2.main_Manu.py	/^    mean_tr_ll = np.array(mean_tr_ll)$/;"	v
mean_tr_ll	Library Examples/5.main_CV_Gaussian.py	/^        mean_tr_ll =  []$/;"	v
mean_tr_ll	Library Examples/5.main_CV_Gaussian.py	/^        mean_tr_ll = np.array(mean_tr_ll)$/;"	v
mean_tr_ll	Library Examples/5.main_CV_Watson.py	/^        mean_tr_ll =  []$/;"	v
mean_tr_ll	Library Examples/5.main_CV_Watson.py	/^        mean_tr_ll = np.array(mean_tr_ll)$/;"	v
mean_val_ll	ECG mains/2.main_Manu.py	/^        mean_val_ll = []$/;"	v
mean_val_ll	ECG mains/2.main_Manu.py	/^        mean_val_ll= np.array(mean_val_ll)$/;"	v
mean_val_ll	ECG mains/2.main_Manu.py	/^    mean_val_ll= np.array(mean_val_ll)$/;"	v
mean_val_ll	Library Examples/5.main_CV_Gaussian.py	/^        mean_val_ll = []$/;"	v
mean_val_ll	Library Examples/5.main_CV_Gaussian.py	/^        mean_val_ll= np.array(mean_val_ll)$/;"	v
mean_val_ll	Library Examples/5.main_CV_Watson.py	/^        mean_val_ll = []$/;"	v
mean_val_ll	Library Examples/5.main_CV_Watson.py	/^        mean_val_ll= np.array(mean_val_ll)$/;"	v
model_theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^            model_theta_init = EMl.init_model_params(K)$/;"	v
model_theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^            model_theta_init = None$/;"	v
model_theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        model_theta_init = EMl.init_model_params(K)$/;"	v
model_theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        model_theta_init = None$/;"	v
model_theta_init	Library Examples/3.main_EM_Watson.py	/^    model_theta_init = None$/;"	v
movingaverage	ECG mains/old/6.main_data2_noWatson.py	/^def movingaverage (values, window):$/;"	f
movingaverage	libs/graph/GUI/graph_GUI_ad (copy).py	/^def movingaverage(values,window):$/;"	f
mpm	Distributions/Gaussian/Gaussian_distribution.py	/^import mpmath as mpm$/;"	i
mpmath	Distributions/Gaussian/Gaussian_distribution.py	/^import mpmath$/;"	i
mpmath	Distributions/Watson/Watson_distribution.py	/^import mpmath$/;"	i
mpmath	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import mpmath$/;"	i
mpmath	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import mpmath$/;"	i
mticker	libs/graph/GUI/graph_GUI_ad (copy).py	/^import matplotlib.ticker as mticker$/;"	i
mticker	libs/graph/graph_axis.py	/^import matplotlib.ticker as mticker$/;"	i
mticker	libs/graph/graph_setting (copy).py	/^import matplotlib.ticker as mticker$/;"	i
mu	Distributions/Watson/Watson_samplingMartin.py	/^mu = [0, 1]  # Mean direction. We transfor to cartesian$/;"	v
mu	Distributions/Watson/Watson_samplingMartin.py	/^mu = [np.cos(mu_angle), np.sin(mu_angle)]  # Mean direction. We transfor to cartesian$/;"	v
mu	ECG mains/old/caca.py	/^mu = difu.normalize_module(mu.T).T$/;"	v
mu	ECG mains/old/caca.py	/^mu = np.random.randn(D,K);$/;"	v
mu	ECG mains/old/main2.py	/^mu = 0$/;"	v
mu	ECG mains/old/main2.py	/^mu = [1*np.pi]$/;"	v
mu	Library Examples/1.main_TryDistribution.py	/^    mu = [np.sin(mu_angle[0])*np.cos(mu_angle[1]), np.sin(mu_angle[0])*np.sin(mu_angle[1]) , np.cos(mu_angle[0])]  # Mean direction. We transfor to cartesian$/;"	v
mu	Library Examples/1.main_TryDistribution.py	/^    mu = gf.normalize_module(mu.T).flatten()$/;"	v
mu	Library Examples/1.main_TryDistribution.py	/^    mu = mu \/ np.sqrt(np.sum(mu * mu))$/;"	v
mu	Library Examples/1.main_TryDistribution.py	/^    mu = np.array([1,-1,-1])$/;"	v
mu	Library Examples/1.main_TryDistribution.py	/^    mu = np.array(mu)$/;"	v
mu	Library Examples/1.main_TryDistribution.py	/^    mu = np.random.randn(5,1);$/;"	v
mu	Library Examples/1.main_TryDistribution.py	/^mu = [np.cos(mu_angle), np.sin(mu_angle)]  # Mean direction. We transfor to cartesian$/;"	v
mu	Library Examples/2.main_SamplesGen.py	/^    mu = Wae.get_MLmean(RandWatson)$/;"	v
mu	Library Examples/2.main_SamplesGen.py	/^    mu = Wae.get_MLmean(Xdata)$/;"	v
mu	Library Examples/2.main_SamplesGen.py	/^    mu = Wae.get_MLmean(Xdata_k)$/;"	v
mu	Library Examples/2.main_SamplesGen.py	/^    mu = mu \/ np.sqrt(np.sum(mu * mu))$/;"	v
mu	Library Examples/2.main_SamplesGen.py	/^    mu = np.array([2,4,5])$/;"	v
mu	Library Examples/2.main_SamplesGen.py	/^    mu = np.random.uniform(-1,1,(1,3)).flatten()$/;"	v
mu1	Library Examples/5.main_CV_Gaussian.py	/^    mu1 = np.array([[2],[4]])$/;"	v
mu2	Library Examples/5.main_CV_Gaussian.py	/^    mu2 = np.array([[-2],[-2]])$/;"	v
mu3	Library Examples/5.main_CV_Gaussian.py	/^    mu3 = np.array([[3],[-4]])$/;"	v
mu_angle	Distributions/Watson/Watson_samplingMartin.py	/^mu_angle = 0.3*np.pi  # Mean angle direction$/;"	v
mu_angle	Library Examples/1.main_TryDistribution.py	/^    mu_angle = [0.5*np.pi, 0.5*np.pi]  # Mean angle direction$/;"	v
mu_angle	Library Examples/1.main_TryDistribution.py	/^mu_angle = 0.3*np.pi  # Mean angle direction$/;"	v
mu_est	Library Examples/1.main_TryDistribution.py	/^    mu_est = Wae.get_MLmean(RandWatson)$/;"	v
mu_opt	ECG mains/old/6.main_data1.py	/^    mu_opt = good_clusters_EM[1][0]$/;"	v
multivariate_normal	Library Examples/5.main_CV_Gaussian.py	/^from scipy.stats import multivariate_normal$/;"	i
multivariate_normal	libs/basicMathlib.py	/^from scipy.stats import multivariate_normal$/;"	i
multivariate_normal	libs/specific_plotting_func.py	/^from scipy.stats import multivariate_normal$/;"	i
mus_0	ECG mains/old/7.main_system.py	/^    mus_0 = Ks_params[0][1][0].T$/;"	v
mus_1	ECG mains/old/7.main_system.py	/^    mus_1 = Ks_params[1][1][0].T$/;"	v
mus_Watson_Gaussian	Library Examples/3.main_EM_Watson.py	/^    mus_Watson_Gaussian = []$/;"	v
mus_k	Library Examples/3.main_EM_Watson.py	/^        mus_k = []$/;"	v
mus_k	Library Examples/3.main_EM_Watson.py	/^        mus_k = np.concatenate(mus_k, axis = 1).T$/;"	v
mx	ECG mains/old/6.main_data2_noWatson.py	/^mx = np.mean(Xtrain,axis=0,dtype=np.float64)$/;"	v
myDManager	ECG mains/2.main_Manu.py	/^            myDManager = Cdist.CDistributionManager()$/;"	v
myDManager	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^myDManager = Cdist.CDistributionManager()$/;"	v
myDManager	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    myDManager = Cdist.CDistributionManager()$/;"	v
myDManager	Library Examples/3.main_EM_Watson.py	/^    myDManager = Cdist.CDistributionManager()$/;"	v
myDManager	Library Examples/5.main_CV_Gaussian.py	/^            myDManager = Cdist.CDistributionManager()$/;"	v
myDManager	Library Examples/5.main_CV_Watson.py	/^            myDManager = Cdist.CDistributionManager()$/;"	v
myEM	ECG mains/2.main_Manu.py	/^                myEM = CEM.CEM( distribution = myDManager,K = K, Ninit = Ninit, delta_ll = delta_ll, T = T, verbose = verbose)$/;"	v
myEM	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        myEM = CEM.CEM( distribution = myDManager, clusters_relation = clusters_relation, $/;"	v
myEM	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        myEM = CEM.CEM( distribution = myDManager, clusters_relation = clusters_relation, $/;"	v
myEM	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    myEM = CEM.CEM( distribution = myDManager, clusters_relation = clusters_relation, $/;"	v
myEM	Library Examples/3.main_EM_Watson.py	/^    myEM = CEM.CEM( distribution = myDManager, clusters_relation = clusters_relation, $/;"	v
myEM	Library Examples/5.main_CV_Gaussian.py	/^                myEM = CEM.CEM( distribution = myDManager, clusters_relation = clusters_relation, $/;"	v
myEM	Library Examples/5.main_CV_Watson.py	/^                myEM = CEM.CEM( distribution = myDManager, clusters_relation = clusters_relation, $/;"	v
myHMM	ECG mains/2.main_Manu.py	/^                myHMM = CHMM.CHMM( distribution = Watson_d, init_hyperparams = [kappa_max_init],  $/;"	v
myHMM	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^        myHMM = CHMM.CHMM( distribution = Watson_d, init_hyperparams = [kappa_max_init],  $/;"	v
n_cluster_opt	ECG mains/old/6.main_data1.py	/^    n_cluster_opt = 5;$/;"	v
names_dic	libs/utilities_lib.py	/^names_dic = dict(zip(periods_names, periods))$/;"	v
ndim	ECG mains/old/6.main_data1 (copy).py	/^    ndim = 70$/;"	v
new_ll	ECG mains/2.main_Manu.py	/^                new_ll = CEM.CEM.get_loglikelihood(Xdata_train,myDManager, theta_list[-1],pimix_list[-1])\/train_index.size$/;"	v
new_ll	ECG mains/2.main_Manu.py	/^                new_ll = CEM.CEM.get_loglikelihood(Xdata_val,myDManager, theta_list[-1],pimix_list[-1])\/val_index.size$/;"	v
new_ll	ECG mains/2.main_Manu.py	/^                new_ll = CHMM.CHMM.get_loglikelihood(Xdata_train_HMM_list,pi_list[-1], A_list[-1],theta_list[-1],Watson_d)\/train_index.size$/;"	v
new_ll	ECG mains/2.main_Manu.py	/^                new_ll = CHMM.CHMM.get_loglikelihood(Xdata_val_HMM_list,pi_list[-1], A_list[-1],theta_list[-1],Watson_d)\/val_index.size$/;"	v
new_ll	Library Examples/5.main_CV_Gaussian.py	/^                new_ll = myEM.get_loglikelihood([Xdata_train],myDManager, theta_list[-1],mode_theta_list[-1])\/train_index.size$/;"	v
new_ll	Library Examples/5.main_CV_Gaussian.py	/^                new_ll = myEM.get_loglikelihood([Xdata_val],myDManager, theta_list[-1],mode_theta_list[-1])\/val_index.size$/;"	v
new_ll	Library Examples/5.main_CV_Watson.py	/^                new_ll = myEM.get_loglikelihood([Xdata_train],myDManager, theta_list[-1],mode_theta_list[-1])\/train_index.size$/;"	v
new_ll	Library Examples/5.main_CV_Watson.py	/^                new_ll = myEM.get_loglikelihood([Xdata_val],myDManager, theta_list[-1],mode_theta_list[-1])\/val_index.size$/;"	v
newton	Distributions/Gaussian/Gaussian_distribution.py	/^from scipy.optimize import newton$/;"	i
newton	Distributions/Gaussian/Gaussian_estimators.py	/^from scipy.optimize import newton$/;"	i
newton	Distributions/Watson/Watson_distribution.py	/^from scipy.optimize import newton$/;"	i
newton	Distributions/Watson/Watson_estimators.py	/^from scipy.optimize import newton$/;"	i
newton	Distributions/Watson/Watson_estimators2.py	/^from scipy.optimize import newton$/;"	i
newton	Distributions/Watson/Watson_sampling.py	/^from scipy.optimize import newton$/;"	i
newton	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^from scipy.optimize import newton$/;"	i
newton	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^from scipy.optimize import newton$/;"	i
newton	Old Code/Watson_estimators (copy).py	/^from scipy.optimize import newton$/;"	i
newton	utils/general_func.py	/^from scipy.optimize import newton$/;"	i
next_subplot	libs/graph/graph_lib.py	/^    next_subplot = grsp.next_subplot$/;"	v	class:CGraph
next_subplot	libs/graph/graph_setting (copy).py	/^def next_subplot(self, projection = "2d"):$/;"	f
next_subplot	libs/graph/graph_subplots.py	/^def next_subplot(self, projection = "2d", sharex = None, sharey = None):$/;"	f
nf	Library Examples/1.main_TryDistribution.py	/^         nf = 1)   $/;"	v
normalize	ECG mains/old/6.main_data1.py	/^                normalize = False )$/;"	v
normalize_data	ECG mains/1.main_Arturo.py	/^def normalize_data(data):$/;"	f
normalize_data	Old Code/Watson_estimators (copy).py	/^def normalize_data(Xdata):$/;"	f
normalize_data	utils/general_func.py	/^def normalize_data(data):$/;"	f
normalize_data	vonMises/main.py	/^def normalize_data(data):$/;"	f
normalize_module	utils/general_func.py	/^def normalize_module(Xdata):$/;"	f
normalize_subject	ECG mains/1.main_Arturo.py	/^def normalize_subject(data):$/;"	f
normalize_subject	utils/general_func.py	/^def normalize_subject(data):$/;"	f
normalize_subject	vonMises/main.py	/^def normalize_subject(data):$/;"	f
normalize_trialList	utils/data_preprocessing.py	/^def normalize_trialList(tL):$/;"	f
np	Distributions/Gaussian/Gaussian_distribution.py	/^import numpy as np$/;"	i
np	Distributions/Gaussian/Gaussian_estimators.py	/^import numpy as np$/;"	i
np	Distributions/Watson/Watson_distribution.py	/^import numpy as np$/;"	i
np	Distributions/Watson/Watson_estimators.py	/^import numpy as np$/;"	i
np	Distributions/Watson/Watson_estimators2.py	/^import numpy as np$/;"	i
np	Distributions/Watson/Watson_sampling.py	/^import numpy as np$/;"	i
np	Distributions/Watson/Watson_samplingMartin.py	/^import numpy as np$/;"	i
np	Distributions/Watson/sampler_lib.py	/^import numpy as np$/;"	i
np	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import numpy as np$/;"	i
np	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import numpy as np$/;"	i
np	ECG mains/1.main_Arturo.py	/^import numpy as np$/;"	i
np	ECG mains/2.main_Manu.py	/^import numpy as np$/;"	i
np	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import numpy as np$/;"	i
np	ECG mains/old/6.main_data1 (copy).py	/^import numpy as np$/;"	i
np	ECG mains/old/6.main_data1.py	/^import numpy as np$/;"	i
np	ECG mains/old/6.main_data2.py	/^import numpy as np$/;"	i
np	ECG mains/old/6.main_data2_noWatson.py	/^import numpy as np$/;"	i
np	ECG mains/old/7.main_system.py	/^import numpy as np$/;"	i
np	ECG mains/old/caca.py	/^import numpy as np$/;"	i
np	ECG mains/old/main2.py	/^import numpy as np$/;"	i
np	EM POO/CDistribution.py	/^import numpy as np$/;"	i
np	EM/EM_lib.py	/^import numpy as np$/;"	i
np	EM/EM_libfunc.py	/^import numpy as np$/;"	i
np	EM/HMM_lib.py	/^import numpy as np$/;"	i
np	EM/HMM_libfunc.py	/^import numpy as np$/;"	i
np	EM/decoder_lib.py	/^import numpy as np$/;"	i
np	EM_POO/CDistribution.py	/^import numpy as np$/;"	i
np	EM_POO/CEM.py	/^import numpy as np$/;"	i
np	EM_POO/CHMM.py	/^import numpy as np$/;"	i
np	Library Examples/1.main_TryDistribution.py	/^import numpy as np$/;"	i
np	Library Examples/2.main_SamplesGen.py	/^import numpy as np$/;"	i
np	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import numpy as np$/;"	i
np	Library Examples/3.main_EM_Watson.py	/^import numpy as np$/;"	i
np	Library Examples/5.main_CV_Gaussian.py	/^import numpy as np$/;"	i
np	Library Examples/5.main_CV_Watson.py	/^import numpy as np$/;"	i
np	Old Code/EM_libfunc_previous.py	/^import numpy as np$/;"	i
np	Old Code/HMM_lib (copy).py	/^import numpy as np$/;"	i
np	Old Code/HMM_lib before.py	/^import numpy as np$/;"	i
np	Old Code/HMM_libfunc.py	/^import numpy as np$/;"	i
np	Old Code/HMM_libfunc2_old.py	/^import numpy as np$/;"	i
np	Old Code/Watson_estimators (copy).py	/^import numpy as np$/;"	i
np	libs/basicMathlib.py	/^import numpy as np$/;"	i
np	libs/graph/GUI/GUI_ex1.py	/^import numpy as np$/;"	i
np	libs/graph/GUI/graph_GUI.py	/^import numpy as np$/;"	i
np	libs/graph/GUI/graph_GUI_ad (copy).py	/^import numpy as np$/;"	i
np	libs/graph/graph_3D.py	/^import numpy as np$/;"	i
np	libs/graph/graph_advanced.py	/^import numpy as np$/;"	i
np	libs/graph/graph_axes.py	/^import numpy as np$/;"	i
np	libs/graph/graph_setting (copy).py	/^import numpy as np$/;"	i
np	libs/graph/specific/graph_tsa.py	/^import numpy as np$/;"	i
np	libs/graph/specific/trading_graphs.py	/^import numpy as np$/;"	i
np	libs/specific_plotting_func.py	/^import numpy as np$/;"	i
np	libs/utilities_lib.py	/^import numpy as np$/;"	i
np	modules/EMmodule.py	/^import numpy as np$/;"	i
np	utils/create_HMM_from_EM_data.py	/^import numpy as np$/;"	i
np	utils/data_preprocessing.py	/^import numpy as np$/;"	i
np	utils/general_func.py	/^import numpy as np$/;"	i
np	utils/system_func.py	/^import numpy as np$/;"	i
np	utils/system_modules.py	/^import numpy as np$/;"	i
np	vonMises/em_module.py	/^import numpy as np$/;"	i
np	vonMises/main.py	/^import numpy as np$/;"	i
np	vonMises/vonMisesFisher.py	/^import numpy as np$/;"	i
null	Distributions/Watson/Watson_sampling.py	/^def null(a, rtol=1e-5):$/;"	f
null	Distributions/Watson/Watson_samplingMartin.py	/^def null(a, rtol=1e-5):$/;"	f
null	Old Code/Watson_estimators (copy).py	/^def null(a, rtol=1e-5):$/;"	f
num_clusters	modules/EMmodule.py	/^    num_clusters = None$/;"	v	class:EMobj
obtain_equation_line	libs/basicMathlib.py	/^def obtain_equation_line(Rf, Epoint, STDpoint):$/;"	f
onClick	libs/graph/GUI/GUI_ex1.py	/^	def onClick(self, event):$/;"	m	class:ClickPlot
onKey	libs/graph/GUI/GUI_ex1.py	/^	def onKey(self, event):$/;"	m	class:ClickPlot
onRelease	libs/graph/GUI/GUI_ex1.py	/^	def onRelease(self, event):$/;"	m	class:ClickPlot
onScroll	libs/graph/GUI/GUI_ex1.py	/^	def onScroll(self, event):$/;"	m	class:ClickPlot
on_clicked	libs/graph/GUI/graph_GUI.py	/^    def on_clicked(self, func):$/;"	m	class:Button2
onselect	libs/graph/GUI/graph_GUI.py	/^    def onselect(xmin, xmax):$/;"	f	function:add_selector
os	ECG mains/1.main_Arturo.py	/^import os,sys$/;"	i
os	ECG mains/2.main_Manu.py	/^import os,sys$/;"	i
os	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import os,sys$/;"	i
os	EM POO/CDistribution.py	/^import os$/;"	i
os	EM_POO/CDistribution.py	/^import os$/;"	i
os	EM_POO/CEM.py	/^import os$/;"	i
os	EM_POO/CHMM.py	/^import os$/;"	i
os	Library Examples/1.main_TryDistribution.py	/^import os$/;"	i
os	Library Examples/2.main_SamplesGen.py	/^import os$/;"	i
os	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import os,sys$/;"	i
os	Library Examples/3.main_EM_Watson.py	/^import os,sys$/;"	i
os	Library Examples/5.main_CV_Gaussian.py	/^import os,sys$/;"	i
os	Library Examples/5.main_CV_Watson.py	/^import os,sys$/;"	i
os	import_folders.py	/^import os$/;"	i
os	libs/basicMathlib.py	/^import os as os$/;"	i
os	libs/graph/specific/graph_tsa.py	/^import os as os$/;"	i
os	libs/import_folders.py	/^import os$/;"	i
os	libs/pickle_lib.py	/^import os$/;"	i
os	libs/utilities_lib.py	/^import os as os$/;"	i
os	modules/EMmodule.py	/^import os,sys$/;"	i
os	vonMises/main.py	/^import os,sys$/;"	i
others	libs/graph/trapyngColors.py	/^others = [$/;"	v
output_file	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    output_file = folder_images + 'Evolution_video. K_G:'+str(K_G)+ ', K_W:' + str(K_W) +'.avi'$/;"	v
output_file_gif	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    output_file_gif = 'Evolution_gif. K_G:'+str(K_G)+ ', K_W:' + str(K_W) +".gif"$/;"	v
p	ECG mains/old/6.main_data2_noWatson.py	/^    p = np.arange(2,5)$/;"	v
param	ECG mains/old/6.main_data2_noWatson.py	/^    param = [{'kernel':'linear','C':C}]$/;"	v
param_grid	ECG mains/old/6.main_data2_noWatson.py	/^    param_grid = [param_grid_linear,param_grid_pol,param_grid_rbf]$/;"	v
param_grid	ECG mains/old/6.main_data2_noWatson.py	/^    param_grid = dict()$/;"	v
param_grid_linear	ECG mains/old/6.main_data2_noWatson.py	/^    param_grid_linear = dict()$/;"	v
param_grid_pol	ECG mains/old/6.main_data2_noWatson.py	/^    param_grid_pol = dict()$/;"	v
param_grid_rbf	ECG mains/old/6.main_data2_noWatson.py	/^    param_grid_rbf = dict()$/;"	v
params	Library Examples/5.main_CV_Watson.py	/^    params = pkl.load_pickle(folder_HMM +"HMM_param.pkl",1)$/;"	v
parsecolor	visualizations/distinguishable_colors.m	/^function c = parsecolor(s)$/;"	f
pca_decomp	utils/system_modules.py	/^def pca_decomp(X_train, X_test, n_components = 1):$/;"	f
pd	ECG mains/1.main_Arturo.py	/^import pandas as pd$/;"	i
pd	ECG mains/2.main_Manu.py	/^import pandas as pd$/;"	i
pd	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import pandas as pd$/;"	i
pd	ECG mains/old/6.main_data1 (copy).py	/^import pandas as pd$/;"	i
pd	ECG mains/old/6.main_data1.py	/^import pandas as pd$/;"	i
pd	ECG mains/old/6.main_data2.py	/^import pandas as pd$/;"	i
pd	ECG mains/old/6.main_data2_noWatson.py	/^import pandas as pd$/;"	i
pd	ECG mains/old/7.main_system.py	/^import pandas as pd$/;"	i
pd	EM POO/CDistribution.py	/^import pandas as pd$/;"	i
pd	EM_POO/CDistribution.py	/^import pandas as pd$/;"	i
pd	EM_POO/CEM.py	/^import pandas as pd$/;"	i
pd	EM_POO/CHMM.py	/^import pandas as pd$/;"	i
pd	Library Examples/2.main_SamplesGen.py	/^import pandas as pd$/;"	i
pd	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import pandas as pd$/;"	i
pd	Library Examples/3.main_EM_Watson.py	/^import pandas as pd$/;"	i
pd	Library Examples/5.main_CV_Gaussian.py	/^import pandas as pd$/;"	i
pd	Library Examples/5.main_CV_Watson.py	/^import pandas as pd$/;"	i
pd	libs/basicMathlib.py	/^import pandas as pd$/;"	i
pd	libs/graph/GUI/graph_GUI.py	/^import pandas as pd$/;"	i
pd	libs/graph/graph_setting (copy).py	/^import pandas as pd$/;"	i
pd	libs/graph/specific/graph_tsa.py	/^import pandas as pd$/;"	i
pd	libs/specific_plotting_func.py	/^import pandas as pd$/;"	i
pd	libs/utilities_lib.py	/^import pandas as pd$/;"	i
pd	utils/create_HMM_from_EM_data.py	/^import pandas as pd$/;"	i
pd	utils/data_preprocessing.py	/^import pandas as pd$/;"	i
pd	utils/general_func.py	/^import pandas as pd$/;"	i
pd	utils/system_func.py	/^import pandas as pd$/;"	i
pd	utils/system_modules.py	/^import pandas as pd$/;"	i
pd	vonMises/data/outputs/visualization.py	/^import pandas as pd$/;"	i
pd	vonMises/em_module.py	/^import pandas as pd$/;"	i
pd	vonMises/main.py	/^import pandas as pd $/;"	i
pdf	vonMises/vonMisesFisher.py	/^def pdf(x,mu,kappa):$/;"	f
pdf_log	vonMises/vonMisesFisher.py	/^def pdf_log(x,mu,kappa):$/;"	f
pdf_log_K	EM POO/CDistribution.py	/^    def pdf_log_K(X, theta, Cs_log = None):$/;"	m	class:CDistribution
pdf_log_K	EM POO/CDistribution.py	/^    def pdf_log_K(self, data, theta, Cs_logs = None):$/;"	m	class:CDistributionManager
pene	libs/graph/GUI/graph_GUI.py	/^def pene():$/;"	f
perform_EM	EM_POO/CDistribution.py	/^perform_EM = 1$/;"	v
perform_EM	EM_POO/CEM.py	/^perform_EM = 1$/;"	v
perform_EM	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^perform_EM = 1$/;"	v
perform_EM	Library Examples/3.main_EM_Watson.py	/^perform_EM = 1$/;"	v
perfrom_CV_EM_classes	utils/system_modules.py	/^def perfrom_CV_EM_classes(Nclasses, X_data_trials, X_data_labels, nfolds = 2,$/;"	f
perfrom_CV_HMM_classes	utils/system_modules.py	/^def perfrom_CV_HMM_classes(Nclasses, X_data_trials, X_data_labels, nfolds = 2,$/;"	f
period_dic	libs/utilities_lib.py	/^period_dic = dict(zip(periods,periods_names))$/;"	v
periods	libs/utilities_lib.py	/^periods = [1,5,15,30,60,240,1440,10080,43200, 43200*12]$/;"	v
periods_names	libs/utilities_lib.py	/^periods_names = ["M1","M5","M15","M30","H1","H4","D1","W1","W4","Y1"]$/;"	v
pi	Distributions/Watson/Watson_samplingMartin.py	/^from numpy import pi$/;"	i
pi	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^from scipy import pi$/;"	i
pi	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^from scipy import pi$/;"	i
pi	Library Examples/2.main_SamplesGen.py	/^pi = np.array([0.2,0.3,0.5])$/;"	v
pi	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        pi = np.array([0.2,0.3,0.5])$/;"	v
pi	Library Examples/5.main_CV_Watson.py	/^    pi = params[0]$/;"	v
pi	modules/EMmodule.py	/^    pi = None$/;"	v	class:EMobj
pi	utils/create_HMM_from_EM_data.py	/^pi = np.array([0.2,0.3,0.5])$/;"	v
pi	vonMises/main.py	/^from scipy import pi$/;"	i
pi	vonMises/vonMisesFisher.py	/^from scipy import pi$/;"	i
pi_end	Library Examples/5.main_CV_Watson.py	/^    pi_end = HMMlf.get_final_probabilities(pi,A,20)$/;"	v
pi_init	ECG mains/old/6.main_data1 (copy).py	/^        pi_init = pimix$/;"	v
pi_opt	ECG mains/old/6.main_data1.py	/^    pi_opt = good_clusters_EM[0]$/;"	v
pickle	libs/pickle_lib.py	/^import pickle$/;"	i
pimix	ECG mains/old/6.main_data1 (copy).py	/^        pimix = EM_params[0]$/;"	v
pkl	ECG mains/1.main_Arturo.py	/^import pickle_lib as pkl$/;"	i
pkl	ECG mains/2.main_Manu.py	/^import pickle_lib as pkl$/;"	i
pkl	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import pickle_lib as pkl$/;"	i
pkl	ECG mains/old/6.main_data1 (copy).py	/^import pickle_lib as pkl$/;"	i
pkl	ECG mains/old/6.main_data1.py	/^import pickle_lib as pkl$/;"	i
pkl	ECG mains/old/6.main_data2.py	/^import pickle_lib as pkl$/;"	i
pkl	ECG mains/old/6.main_data2_noWatson.py	/^import pickle_lib as pkl$/;"	i
pkl	ECG mains/old/7.main_system.py	/^import pickle_lib as pkl$/;"	i
pkl	EM POO/CDistribution.py	/^import pickle_lib as pkl$/;"	i
pkl	EM_POO/CDistribution.py	/^import pickle_lib as pkl$/;"	i
pkl	EM_POO/CEM.py	/^import pickle_lib as pkl$/;"	i
pkl	EM_POO/CHMM.py	/^import pickle_lib as pkl$/;"	i
pkl	Library Examples/2.main_SamplesGen.py	/^import pickle_lib as pkl$/;"	i
pkl	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import pickle_lib as pkl$/;"	i
pkl	Library Examples/3.main_EM_Watson.py	/^import pickle_lib as pkl$/;"	i
pkl	Library Examples/5.main_CV_Gaussian.py	/^import pickle_lib as pkl$/;"	i
pkl	Library Examples/5.main_CV_Watson.py	/^import pickle_lib as pkl$/;"	i
pkl	utils/create_HMM_from_EM_data.py	/^import pickle_lib as pkl$/;"	i
pkl	utils/data_preprocessing.py	/^import pickle_lib as pkl$/;"	i
pkl	utils/system_func.py	/^import pickle_lib as pkl$/;"	i
pkl	utils/system_modules.py	/^import pickle_lib as pkl$/;"	i
plot	libs/graph/graph_lib.py	/^    plot = grpl.plot$/;"	v	class:CGraph
plot	libs/graph/graph_plots.py	/^def plot(self, X = [],Y = [],           # X-Y points in the graph.$/;"	f
plotMACD	libs/graph/graph_lib.py	/^    plotMACD = trgr.plotMACD$/;"	v	class:CGraph
plotMACD	libs/graph/specific/trading_graphs.py	/^def plotMACD(self, timeData, nslow = 26, nfast = 12, nema = 9, $/;"	f
plot_3D	libs/graph/graph_3D.py	/^def plot_3D (self, xx,yy,zz,$/;"	f
plot_3D	libs/graph/graph_lib.py	/^    plot_3D = gr3D.plot_3D$/;"	v	class:CGraph
plot_Clusters_HMM_time	utils/data_preprocessing.py	/^def plot_Clusters_HMM_time(Xdata,Ks_params):$/;"	f
plot_Clusters_time	utils/data_preprocessing.py	/^def plot_Clusters_time(Xdata,Ks_params):$/;"	f
plot_PCA_example	utils/system_modules.py	/^def plot_PCA_example(X_train, y_train):$/;"	f
plot_acf_pacf	libs/graph/specific/graph_tsa.py	/^def plot_acf_pacf(timeSeries, nlags = 40, alpha = 0.05,$/;"	f
plot_clusters_info	ECG mains/old/6.main_data1.py	/^plot_clusters_info = 0$/;"	v
plot_combined_EM_HMM	ECG mains/2.main_Manu.py	/^plot_combined_EM_HMM = 0 # To plot the data $/;"	v
plot_combined_EM_HMM	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^plot_combined_EM_HMM = 0 # To plot the data $/;"	v
plot_combined_EM_HMM	Library Examples/5.main_CV_Watson.py	/^plot_combined_EM_HMM = 1 # To plot the data $/;"	v
plot_data_trials	utils/system_modules.py	/^def plot_data_trials(Nclasses, X_train, y_train,$/;"	f
plot_decomposition	libs/graph/specific/graph_tsa.py	/^def plot_decomposition(timeSeries):$/;"	f
plot_evolution	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^plot_evolution = 0$/;"	v
plot_evolution	Library Examples/3.main_EM_Watson.py	/^    plot_evolution = 1$/;"	v
plot_evolution_2	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^plot_evolution_2 = 0$/;"	v
plot_evolution_ll_video	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^plot_evolution_ll_video = 0$/;"	v
plot_evolution_video	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^plot_evolution_video = 1$/;"	v
plot_filled	libs/graph/graph_lib.py	/^    plot_filled = grpl.plot_filled$/;"	v	class:CGraph
plot_filled	libs/graph/graph_plots.py	/^def plot_filled(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
plot_final_distribution	libs/specific_plotting_func.py	/^def plot_final_distribution(X1,X2,mu1,cov1,mu2,cov2, myDManager, K_G, K_W, logl,theta_list,pimix_list, folder_images):$/;"	f
plot_indicator	libs/graph/graph_lib.py	/^    plot_indicator = trgr.plot_indicator$/;"	v	class:CGraph
plot_indicator	libs/graph/specific/trading_graphs.py	/^def plot_indicator(self, timeData, Ndiv = 4, HPV = 2, color_mode = 1):$/;"	f
plot_means	utils/system_modules.py	/^def plot_means(Nclasses, X_train, y_train,$/;"	f
plot_multiple_iterations	libs/specific_plotting_func.py	/^def plot_multiple_iterations(X1,X2,mu1,cov1,mu2,cov2, myDManager, K_G, K_W, logl,theta_list,pimix_list, folder_images):$/;"	f
plot_original_data	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^plot_original_data= 1$/;"	v
plot_precomputed_likelihoods_CV	ECG mains/old/6.main_data1.py	/^plot_precomputed_likelihoods_CV = 0$/;"	v
plot_single_trials	utils/system_modules.py	/^def plot_single_trials(Nclasses, X_train, y_train,$/;"	f
plot_timeRegression	libs/graph/graph_advanced.py	/^def plot_timeRegression(self,Xval, Yval, sigma,$/;"	f
plot_timeRegression	libs/graph/graph_lib.py	/^    plot_timeRegression = grad.plot_timeRegression$/;"	v	class:CGraph
plot_timeSeriesRange	libs/graph/graph_advanced.py	/^def plot_timeSeriesRange(self, X, Y, sigma, k = 1.96, nf = 0, legend = ["95% CI f(x)"]):$/;"	f
plot_timeSeriesRange	libs/graph/graph_lib.py	/^    plot_timeSeriesRange = grad.plot_timeSeriesRange$/;"	v	class:CGraph
plot_trials_for_same_instance	utils/system_modules.py	/^def plot_trials_for_same_instance(X_data_trials, X_data_labels, X_train, y_train,$/;"	f
plot_wid	libs/graph/GUI/graph_GUI.py	/^def plot_wid(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
plot_wid	libs/graph/graph_lib.py	/^    plot_wid = grGUI.plot_wid$/;"	v	class:CGraph
plots_flag	ECG mains/old/6.main_data1.py	/^plots_flag = 0$/;"	v
plotting_all_trials_one_instant	ECG mains/old/6.main_data2.py	/^plotting_all_trials_one_instant = 0$/;"	v
plotting_ave_trial_time	ECG mains/old/6.main_data2.py	/^plotting_ave_trial_time = 0$/;"	v
plotting_trial_time	ECG mains/old/6.main_data2.py	/^plotting_trial_time = 1$/;"	v
plt	Distributions/Watson/Watson_samplingMartin.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/1.main_Arturo.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/2.main_Manu.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/old/6.main_data1 (copy).py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/old/6.main_data1.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/old/6.main_data2.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/old/6.main_data2_noWatson.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/old/7.main_system.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ECG mains/old/main2.py	/^import matplotlib.pyplot as plt$/;"	i
plt	EM POO/CDistribution.py	/^import matplotlib.pyplot as plt$/;"	i
plt	EM_POO/CDistribution.py	/^import matplotlib.pyplot as plt$/;"	i
plt	EM_POO/CEM.py	/^import matplotlib.pyplot as plt$/;"	i
plt	EM_POO/CHMM.py	/^import matplotlib.pyplot as plt$/;"	i
plt	Library Examples/1.main_TryDistribution.py	/^import matplotlib.pyplot as plt$/;"	i
plt	Library Examples/2.main_SamplesGen.py	/^import matplotlib.pyplot as plt$/;"	i
plt	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import matplotlib.pyplot as plt$/;"	i
plt	Library Examples/3.main_EM_Watson.py	/^import matplotlib.pyplot as plt$/;"	i
plt	Library Examples/5.main_CV_Gaussian.py	/^import matplotlib.pyplot as plt$/;"	i
plt	Library Examples/5.main_CV_Watson.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/basicMathlib.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/GUI/graph_GUI.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/GUI/graph_GUI_ad (copy).py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_3D.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_advanced.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_axes.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_axis.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_basic.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_plots.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_setting (copy).py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_setting.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/graph_subplots.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/specific/graph_tsa.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/graph/specific/trading_graphs.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/specific_plotting_func.py	/^import matplotlib.pyplot as plt$/;"	i
plt	libs/utilities_lib.py	/^import matplotlib.pyplot as plt$/;"	i
plt	utils/create_HMM_from_EM_data.py	/^import matplotlib.pyplot as plt$/;"	i
plt	utils/data_preprocessing.py	/^import matplotlib.pyplot as plt$/;"	i
plt	utils/system_func.py	/^import matplotlib.pyplot as plt$/;"	i
plt	utils/system_modules.py	/^import matplotlib.pyplot as plt$/;"	i
plt	vonMises/data/outputs/visualization.py	/^import matplotlib.pyplot as plt$/;"	i
possible_channels	ECG mains/old/7.main_system.py	/^possible_channels = range(Ndim)$/;"	v
precompute_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        precompute_init = 0$/;"	v
precompute_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    precompute_init = 0$/;"	v
preproces_data_3D	libs/graph/graph_3D.py	/^def preproces_data_3D(self, xx,yy,zz):$/;"	f
preproces_data_3D	libs/graph/graph_lib.py	/^    preproces_data_3D = gr3D.preproces_data_3D$/;"	v	class:CGraph
preprocess_data	ECG mains/old/6.main_data1 (copy).py	/^preprocess_data = 0$/;"	v
preprocess_data	libs/graph/graph_lib.py	/^    preprocess_data = grset.preprocess_data$/;"	v	class:CGraph
preprocess_data	libs/graph/graph_setting (copy).py	/^def preprocess_data(self,X,Y):$/;"	f
preprocess_data	libs/graph/graph_setting.py	/^def preprocess_data(self,X,Y, dataTransform = None ):$/;"	f
preprocess_data_set	utils/data_preprocessing.py	/^def preprocess_data_set (X_All_labels, label_classes, $/;"	f
preprocess_dates	libs/utilities_lib.py	/^def preprocess_dates(X):$/;"	f
preprocessing	ECG mains/old/6.main_data1 (copy).py	/^from sklearn import preprocessing$/;"	i
preprocessing	ECG mains/old/6.main_data1.py	/^from sklearn import preprocessing$/;"	i
preprocessing	ECG mains/old/6.main_data2.py	/^from sklearn import preprocessing$/;"	i
preprocessing	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn import preprocessing$/;"	i
preprocessing	ECG mains/old/7.main_system.py	/^from sklearn import preprocessing$/;"	i
preprocessing	utils/data_preprocessing.py	/^from sklearn import preprocessing$/;"	i
preprocessing	utils/system_func.py	/^from sklearn import preprocessing$/;"	i
preprocessing	utils/system_modules.py	/^from sklearn import preprocessing$/;"	i
press	libs/graph/GUI/graph_GUI.py	/^    def press(event):$/;"	f	function:add_onKeyPress
prob	ECG mains/old/main2.py	/^prob = Watson_pdf(alpha, mu, kappa)$/;"	v
prob	Library Examples/1.main_TryDistribution.py	/^prob = np.exp(Wad.Watson_pdf_log(Xsample, [mu, kappa]))$/;"	v
probs	ECG mains/old/main2.py	/^probs = []$/;"	v
probs	Library Examples/1.main_TryDistribution.py	/^    probs = []  # Vector with probabilities$/;"	v
probs	Library Examples/1.main_TryDistribution.py	/^    probs = np.array(probs).T$/;"	v
probs	Library Examples/1.main_TryDistribution.py	/^probs  = np.array(probs)$/;"	v
probs	Library Examples/1.main_TryDistribution.py	/^probs = []  # Vector with probabilities$/;"	v
putamadere	libs/graph/graph_advanced.py	/^def putamadere(wd):$/;"	f
pylab	libs/graph/GUI/graph_GUI.py	/^import pylab$/;"	i
pylab	libs/graph/GUI/graph_GUI_ad (copy).py	/^import pylab$/;"	i
pylab	libs/graph/graph_setting (copy).py	/^import pylab$/;"	i
pylab	libs/graph/specific/trading_graphs.py	/^import pylab$/;"	i
pyplot	libs/graph/GUI/GUI_ex1.py	/^from matplotlib import pyplot$/;"	i
qda	ECG mains/old/6.main_data1.py	/^    qda =  sm.get_QDA(Xtrain, Xtest, Ytrain, Ytest)$/;"	v
r_ellipse	Library Examples/5.main_CV_Gaussian.py	/^    r_ellipse = bMA.get_ellipse_points(mean,w,h,theta)$/;"	v
r_seed	ECG mains/old/6.main_data1.py	/^    r_seed = np.abs(int(100 * np.random.randn()))   $/;"	v
r_seed	ECG mains/old/6.main_data2_noWatson.py	/^    r_seed = np.abs(int(100 * np.random.randn()))                $/;"	v
randUniformSphere	Distributions/Watson/Watson_sampling.py	/^def randUniformSphere(N, p):$/;"	f
randUniformSphere	Distributions/Watson/Watson_samplingMartin.py	/^def randUniformSphere(N, p):$/;"	f
randUniformSphere	Old Code/Watson_estimators (copy).py	/^def randUniformSphere(N, p):$/;"	f
randWatson	Distributions/Watson/Watson_sampling.py	/^def randWatson(N, mu, k):$/;"	f
randWatson	Distributions/Watson/Watson_samplingMartin.py	/^def randWatson(N, mu, k):$/;"	f
randWatson	Old Code/Watson_estimators (copy).py	/^def randWatson(N, mu, k):$/;"	f
randWatsonMeanDir	Distributions/Watson/Watson_sampling.py	/^def randWatsonMeanDir(N, k, p):$/;"	f
randWatsonMeanDir	Distributions/Watson/Watson_samplingMartin.py	/^def randWatsonMeanDir(N, k, p):$/;"	f
randWatsonMeanDir	Old Code/Watson_estimators (copy).py	/^def randWatsonMeanDir(N, kappa, p):$/;"	f
randWatsonMeanDir2	Distributions/Watson/Watson_sampling.py	/^def randWatsonMeanDir2(N, kappa, p):$/;"	f
reconstruc_return	libs/basicMathlib.py	/^def reconstruc_return(seq,ret, lag = 1, cval = 0):$/;"	f
reds	libs/graph/trapyngColors.py	/^reds = [$/;"	v
release	libs/graph/GUI/graph_GUI.py	/^    def release(event):$/;"	f	function:add_onKeyPress
remove_A	EM/HMM_libfunc.py	/^def remove_A(A, k):$/;"	f
remove_cluster	EM POO/CDistribution.py	/^    def remove_cluster(self, k):$/;"	m	class:CDistributionManager
remove_cluster	EM/EM_libfunc.py	/^def remove_cluster(theta, model_theta, k):$/;"	f
remove_cluster	EM/HMM_libfunc.py	/^def remove_cluster( theta, model_theta, k):$/;"	f
remove_cluster	Old Code/EM_libfunc_previous.py	/^def remove_cluster(theta, pi, k):$/;"	f
remove_features_average	utils/data_preprocessing.py	/^def remove_features_average (X_All_labels):$/;"	f
remove_list_indxs	libs/utilities_lib.py	/^def remove_list_indxs(lista, indx_list):$/;"	f
remove_module	utils/general_func.py	/^def remove_module(X):$/;"	f
remove_timePoints_average	utils/data_preprocessing.py	/^def remove_timePoints_average (X_All_labels):$/;"	f
reset	libs/graph/GUI/graph_GUI.py	/^    def reset(event):$/;"	f	function:pene
result	ECG mains/old/caca.py	/^result = difu.Watson_K_pdf_log(data,mu,kappas,cp_logs)$/;"	v
rf	ECG mains/old/6.main_data2_noWatson.py	/^    rf = RandomForestClassifier(n_estimators=1000,max_features=gtree.best_estimator_.max_features,max_depth=gtree.best_estimator_.max_depth,min_samples_split=gtree.best_estimator_.min_samples_split,oob_score=True,n_jobs=-1)$/;"	v
rsiFunc	libs/graph/GUI/graph_GUI_ad (copy).py	/^def rsiFunc(prices, n=14):$/;"	f
run_several_EM	EM/EM_lib.py	/^def run_several_EM(data, distribution, clusters_relation = "independent", $/;"	f
run_several_HMM	EM/HMM_lib.py	/^def run_several_HMM(data, distribution,$/;"	f
s	ECG mains/old/main2.py	/^s = np.random.vonmises(mu, kappa, 1000)$/;"	v
sanityCheck	libs/graph/GUI/GUI_ex1.py	/^	def sanityCheck(self):$/;"	m	class:ClickPlot
savefig	libs/graph/graph_basic.py	/^def savefig(self,file_dir = ".\/image.png", $/;"	f
savefig	libs/graph/graph_lib.py	/^    savefig = grba.savefig$/;"	v	class:CGraph
savefig	libs/graph/graph_setting (copy).py	/^def savefig(self,file_dir = ".\/image.png", $/;"	f
scatter	libs/graph/graph_lib.py	/^    scatter = grpl.scatter$/;"	v	class:CGraph
scatter	libs/graph/graph_plots.py	/^def scatter(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
scatter_3D	libs/graph/graph_3D.py	/^def scatter_3D  (self, X,Y,Z,$/;"	f
scatter_3D	libs/graph/graph_lib.py	/^    scatter_3D = gr3D.scatter_3D$/;"	v	class:CGraph
scipy	Distributions/Watson/sampler_lib.py	/^import scipy.interpolate as interpolate$/;"	i
scipy	ECG mains/1.main_Arturo.py	/^    import scipy.io as sio$/;"	i
scipy	ECG mains/old/6.main_data1 (copy).py	/^import scipy.io$/;"	i
scipy	ECG mains/old/6.main_data1.py	/^import scipy.io$/;"	i
scipy	ECG mains/old/6.main_data2.py	/^import scipy.io$/;"	i
scipy	ECG mains/old/6.main_data2_noWatson.py	/^import scipy.io$/;"	i
scipy	ECG mains/old/7.main_system.py	/^import scipy.io$/;"	i
scipy	libs/basicMathlib.py	/^import scipy$/;"	i
scipy	libs/basicMathlib.py	/^import scipy.stats as stats$/;"	i
scipy	utils/data_preprocessing.py	/^import scipy.io$/;"	i
scipy	utils/general_func.py	/^    import scipy.io as sio$/;"	i
scipy	utils/system_func.py	/^import scipy.io$/;"	i
scipy	utils/system_modules.py	/^import scipy.io$/;"	i
scipy	vonMises/main.py	/^    import scipy.io as sio$/;"	i
scipy_hyp1f1	Distributions/Gaussian/Gaussian_distribution.py	/^from scipy.special import hyp1f1 as scipy_hyp1f1$/;"	i
scipy_hyp1f1	Distributions/Watson/Watson_distribution.py	/^from scipy.special import hyp1f1 as scipy_hyp1f1$/;"	i
scipy_hyp1f1	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^from scipy.special import hyp1f1 as scipy_hyp1f1$/;"	i
scipy_hyp1f1	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^from scipy.special import hyp1f1 as scipy_hyp1f1$/;"	i
scorer	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
scorer	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
scores	ECG mains/old/6.main_data2_noWatson.py	/^    scores = np.empty((4))$/;"	v
scores	ECG mains/old/6.main_data2_noWatson.py	/^    scores = np.empty((6))$/;"	v
selectSubPlot	libs/graph/GUI/GUI_ex1.py	/^	def selectSubPlot(self, i):$/;"	m	class:ClickPlot
set_distribution	EM POO/CDistribution.py	/^    def set_distribution(self,distribution, parameters = None):$/;"	m	class:CDistribution
set_fontSizes	libs/graph/graph_lib.py	/^    set_fontSizes = grset.set_fontSizes$/;"	v	class:CGraph
set_fontSizes	libs/graph/graph_setting.py	/^def set_fontSizes(self, ax = None, title = None, xlabel = None, ylabel = None, $/;"	f
set_labels	libs/graph/graph_lib.py	/^    set_labels = grset.set_labels$/;"	v	class:CGraph
set_labels	libs/graph/graph_setting (copy).py	/^def set_labels(self, labels, fontsize, loc = 1):$/;"	f
set_labels	libs/graph/graph_setting.py	/^def set_labels(self, labels):$/;"	f
set_parameters	EM POO/CDistribution.py	/^    def set_parameters(self, parameters):$/;"	m	class:CDistribution
set_subplots	libs/graph/graph_lib.py	/^    set_subplots = grsp.set_subplots$/;"	v	class:CGraph
set_subplots	libs/graph/graph_setting (copy).py	/^def set_subplots(self, nr, nc, projection = "2d", sharex=False):$/;"	f
set_subplots	libs/graph/graph_subplots.py	/^def set_subplots(self, nr, nc, projection = "2d", sharex=False):$/;"	f
set_textRotations	libs/graph/graph_lib.py	/^    set_textRotations = grset.set_textRotations$/;"	v	class:CGraph
set_textRotations	libs/graph/graph_setting.py	/^def set_textRotations(self, ax = None, title = None, xlabel = None, ylabel = None, $/;"	f
set_xlim	libs/graph/graph_axes.py	/^def set_xlim(self, ax = None, X = None, xmin = None, xmax = None):$/;"	f
set_xlim	libs/graph/graph_lib.py	/^    set_xlim = graxes.set_xlim$/;"	v	class:CGraph
set_xlim	libs/graph/graph_setting (copy).py	/^def set_xlim(self, xmin = -1, xmax = -1):$/;"	f
set_ylim	libs/graph/graph_axes.py	/^def set_ylim(self, ax = None, Y = None, ymin = None, ymax = None):$/;"	f
set_ylim	libs/graph/graph_lib.py	/^    set_ylim = graxes.set_ylim$/;"	v	class:CGraph
set_ylim	libs/graph/graph_setting (copy).py	/^def set_ylim(self, ymin = -1, ymax = -1, ax = -1):$/;"	f
set_zoom	libs/graph/graph_axes.py	/^def set_zoom(self, ax = None, xlim = None ,X =None, Y = None, ylim = None, xlimPad = None ,ylimPad = None):$/;"	f
set_zoom	libs/graph/graph_lib.py	/^    set_zoom = graxes.set_zoom$/;"	v	class:CGraph
severalEM	vonMises/em_module.py	/^def severalEM(X,K,Ninit = 5, maxit = 100, verbose = False):$/;"	f
shift	libs/basicMathlib.py	/^def shift(X, lag = 1, cval = 0): # cval=np.NaN$/;"	f
show	libs/graph/GUI/GUI_ex1.py	/^	def show(self):$/;"	m	class:ClickPlot
showClickPlot	libs/graph/GUI/GUI_ex1.py	/^def showClickPlot(fig=None):$/;"	f
shutil	libs/specific_plotting_func.py	/^    import shutil$/;"	i
shutil	libs/utilities_lib.py	/^import shutil$/;"	i
simmilarity	libs/utilities_lib.py	/^def simmilarity(patterns,query,algo):$/;"	f
sio	ECG mains/1.main_Arturo.py	/^    import scipy.io as sio$/;"	i
sio	utils/general_func.py	/^    import scipy.io as sio$/;"	i
sio	vonMises/main.py	/^    import scipy.io as sio$/;"	i
six	libs/graph/GUI/graph_GUI.py	/^import six$/;"	i
sizeInches	ECG mains/old/6.main_data1.py	/^            sizeInches = [],  # The size in inches as a list$/;"	v
sl	ECG mains/1.main_Arturo.py	/^import sampler_lib as sl$/;"	i
sl	ECG mains/old/6.main_data1 (copy).py	/^import sampler_lib as sl$/;"	i
sl	ECG mains/old/6.main_data1.py	/^import sampler_lib as sl$/;"	i
sl	ECG mains/old/6.main_data2.py	/^import sampler_lib as sl$/;"	i
sl	ECG mains/old/6.main_data2_noWatson.py	/^import sampler_lib as sl$/;"	i
sl	ECG mains/old/7.main_system.py	/^import sampler_lib as sl$/;"	i
sl	EM POO/CDistribution.py	/^import sampler_lib as sl$/;"	i
sl	EM_POO/CDistribution.py	/^import sampler_lib as sl$/;"	i
sl	EM_POO/CEM.py	/^import sampler_lib as sl$/;"	i
sl	EM_POO/CHMM.py	/^import sampler_lib as sl$/;"	i
sl	Library Examples/1.main_TryDistribution.py	/^import sampler_lib as sl$/;"	i
sl	Library Examples/2.main_SamplesGen.py	/^import sampler_lib as sl$/;"	i
sl	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import sampler_lib as sl$/;"	i
sl	Library Examples/3.main_EM_Watson.py	/^import sampler_lib as sl$/;"	i
sl	utils/create_HMM_from_EM_data.py	/^import sampler_lib as sl$/;"	i
sl	utils/data_preprocessing.py	/^import sampler_lib as sl$/;"	i
sl	utils/system_func.py	/^import sampler_lib as sl$/;"	i
sl	utils/system_modules.py	/^import sampler_lib as sl$/;"	i
slide	libs/graph/GUI/graph_GUI.py	/^    def slide(val):$/;"	f	function:plot_wid
slideTime	libs/graph/GUI/graph_GUI.py	/^    def slideTime(val):$/;"	f	function:add_slider
slide_axis	libs/graph/GUI/graph_GUI.py	/^def slide_axis(val):$/;"	f
sm	ECG mains/old/6.main_data1.py	/^import system_modules as sm$/;"	i
sort_and_get_order	libs/utilities_lib.py	/^def sort_and_get_order (x, reverse = True ):$/;"	f
spatial	libs/basicMathlib.py	/^from scipy import spatial$/;"	i
spatial	libs/graph/specific/graph_tsa.py	/^from scipy import spatial$/;"	i
spatial	libs/utilities_lib.py	/^from scipy import spatial$/;"	i
special	Distributions/Watson/Watson_samplingMartin.py	/^from scipy import special$/;"	i
spf	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import specific_plotting_func as spf$/;"	i
sqrt	vonMises/data/outputs/visualization.py	/^from numpy import sqrt$/;"	i
st_FB_MAP_dec	EM/decoder_lib.py	/^def st_FB_MAP_dec(t,gamma,T):$/;"	f
stats	libs/basicMathlib.py	/^import scipy.stats as stats$/;"	i
stattools	libs/graph/specific/graph_tsa.py	/^from statsmodels.tsa import stattools$/;"	i
std	vonMises/em_module.py	/^def std(alist):$/;"	f
std_shit	ECG mains/old/6.main_data2.py	/^        std_shit = np.std(X_ave, axis = 0).reshape(1,3)$/;"	v
std_tr_ll	ECG mains/2.main_Manu.py	/^        std_tr_ll = []$/;"	v
std_tr_ll	ECG mains/2.main_Manu.py	/^        std_tr_ll= np.array(std_tr_ll)$/;"	v
std_tr_ll	ECG mains/2.main_Manu.py	/^    std_tr_ll= np.array(std_tr_ll)$/;"	v
std_tr_ll	Library Examples/5.main_CV_Gaussian.py	/^        std_tr_ll = []$/;"	v
std_tr_ll	Library Examples/5.main_CV_Gaussian.py	/^        std_tr_ll= np.array(std_tr_ll)$/;"	v
std_tr_ll	Library Examples/5.main_CV_Watson.py	/^        std_tr_ll = []$/;"	v
std_tr_ll	Library Examples/5.main_CV_Watson.py	/^        std_tr_ll= np.array(std_tr_ll)$/;"	v
std_val_ll	ECG mains/2.main_Manu.py	/^        std_val_ll = []$/;"	v
std_val_ll	ECG mains/2.main_Manu.py	/^        std_val_ll= np.array(std_val_ll)$/;"	v
std_val_ll	ECG mains/2.main_Manu.py	/^    std_val_ll= np.array(std_val_ll)$/;"	v
std_val_ll	Library Examples/5.main_CV_Gaussian.py	/^        std_val_ll = []$/;"	v
std_val_ll	Library Examples/5.main_CV_Gaussian.py	/^        std_val_ll= np.array(std_val_ll)$/;"	v
std_val_ll	Library Examples/5.main_CV_Watson.py	/^        std_val_ll = []$/;"	v
std_val_ll	Library Examples/5.main_CV_Watson.py	/^        std_val_ll= np.array(std_val_ll)$/;"	v
stdx	ECG mains/old/6.main_data2_noWatson.py	/^stdx = np.std(Xtrain,axis=0,dtype=np.float64)$/;"	v
stem	libs/graph/graph_lib.py	/^    stem = grpl.stem$/;"	v	class:CGraph
stem	libs/graph/graph_plots.py	/^def stem(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
step	libs/graph/graph_lib.py	/^    step = grpl.step$/;"	v	class:CGraph
step	libs/graph/graph_plots.py	/^def step(self, X = [],Y = [],  # X-Y points in the graph.$/;"	f
stkfold	ECG mains/2.main_Manu.py	/^        stkfold = cross_validation.StratifiedKFold(fake_labels, n_folds = Nfolds)$/;"	v
stkfold	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    stkfold = cross_validation.StratifiedKFold(fake_labels, n_folds = Nfolds)$/;"	v
stkfold	ECG mains/old/6.main_data1.py	/^        stkfold = cross_validation.StratifiedKFold(X_data_labels, n_folds = 5)$/;"	v
stkfold	ECG mains/old/6.main_data2_noWatson.py	/^    stkfold = StratifiedKFold(Ytrain, n_folds = 5)$/;"	v
stkfold	Library Examples/5.main_CV_Gaussian.py	/^        stkfold = cross_validation.StratifiedKFold(fake_labels, n_folds = Nfolds, shuffle= True)$/;"	v
stkfold	Library Examples/5.main_CV_Watson.py	/^        stkfold = cross_validation.StratifiedKFold(fake_labels, n_folds = Nfolds, shuffle= True)$/;"	v
store_WidgetData	libs/graph/graph_lib.py	/^    store_WidgetData = grset.store_WidgetData$/;"	v	class:CGraph
store_WidgetData	libs/graph/graph_setting.py	/^def store_WidgetData(self, plots_typ, plots):$/;"	f
store_pickle	libs/pickle_lib.py	/^def store_pickle (filename, li, partitions = 1, verbose = 1):$/;"	f
str_to_datetime	libs/utilities_lib.py	/^def str_to_datetime(dateStr):$/;"	f
subPlot1	libs/graph/GUI/GUI_ex1.py	/^	subPlot1 = fig.add_subplot('211')$/;"	v
subPlot2	libs/graph/GUI/GUI_ex1.py	/^	subPlot2 = fig.add_subplot('212')$/;"	v
subplot2grid	libs/graph/graph_lib.py	/^    subplot2grid = grsp.subplot2grid$/;"	v	class:CGraph
subplot2grid	libs/graph/graph_setting (copy).py	/^def subplot2grid(self, *args, **kwargs): #divisions, selection):$/;"	f
subplot2grid	libs/graph/graph_subplots.py	/^def subplot2grid(self, *args, **kwargs): #divisions, selection):$/;"	f
subplots_adjust	libs/graph/graph_axis.py	/^def subplots_adjust(self, hide_xaxis = True, left=.09, bottom=.10, right=.90, top=.95, wspace=.20, hspace=0):$/;"	f
subplots_adjust	libs/graph/graph_lib.py	/^    subplots_adjust =  grsp.subplots_adjust$/;"	v	class:CGraph
subplots_adjust	libs/graph/graph_setting (copy).py	/^def subplots_adjust(self, hide_xaxis = True, left=.09, bottom=.10, right=.90, top=.95, wspace=.20, hspace=0):$/;"	f
subplots_adjust	libs/graph/graph_subplots.py	/^def subplots_adjust(self, hide_xaxis = False, left=.09, bottom=.10, right=.90, top=.95, wspace=.20, hspace=0):$/;"	f
sum_logs	Old Code/HMM_libfunc.py	/^def sum_logs(log_vector):$/;"	f
sum_logs	Old Code/HMM_libfunc2_old.py	/^def sum_logs(log_vector):$/;"	f
sum_logs	utils/general_func.py	/^def sum_logs(log_vector, byRow = False):$/;"	f
support_detection	libs/utilities_lib.py	/^def support_detection(sequence, L):$/;"	f
sys	ECG mains/1.main_Arturo.py	/^import os,sys$/;"	i
sys	ECG mains/2.main_Manu.py	/^import os,sys$/;"	i
sys	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import os,sys$/;"	i
sys	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import os,sys$/;"	i
sys	Library Examples/3.main_EM_Watson.py	/^import os,sys$/;"	i
sys	Library Examples/5.main_CV_Gaussian.py	/^import os,sys$/;"	i
sys	Library Examples/5.main_CV_Watson.py	/^import os,sys$/;"	i
sys	import_folders.py	/^import sys$/;"	i
sys	libs/graph/GUI/graph_GUI.py	/^import sys$/;"	i
sys	libs/import_folders.py	/^import sys$/;"	i
sys	modules/EMmodule.py	/^import os,sys$/;"	i
sys	vonMises/main.py	/^import os,sys$/;"	i
systems	ECG mains/old/6.main_data1.py	/^systems = 1$/;"	v
t0	ECG mains/old/caca.py	/^    t0 = time.time()$/;"	v
t1	ECG mains/old/caca.py	/^    t1 = time.time()$/;"	v
t_show	ECG mains/old/6.main_data2.py	/^    t_show = 30$/;"	v
testscores	ECG mains/old/6.main_data2_noWatson.py	/^    testscores = [gsvml.score(Xtest,Ytest),gsvmp.score(Xtest,Ytest),gsvmr.score(Xtest,Ytest)]$/;"	v
the	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
the	utils/system_modules.py	/^from sklearn.metrics import  make_scorer     # To make a scorer for the GridSearch.$/;"	i
theta	ECG mains/old/6.main_data1 (copy).py	/^        theta = EM_params[1]$/;"	v
theta	modules/EMmodule.py	/^    theta = None$/;"	v	class:EMobj
theta1	Library Examples/5.main_CV_Gaussian.py	/^    theta1 = Gae.get_Gaussian_muSigma_ML(X1.T)$/;"	v
theta_estimator	EM POO/CDistribution.py	/^    def theta_estimator(X, rk = None, parameters = None):$/;"	m	class:CDistribution
theta_i	Library Examples/3.main_EM_Watson.py	/^                theta_i = theta_list[iter_i][k]$/;"	v
theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^            theta_init = Gad.init_params(K,D, theta_init = None, parameters = Gad.parameters)$/;"	v
theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^            theta_init = None$/;"	v
theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        theta_init = Gad.init_params(K,D, theta_init = None, parameters = Gad.parameters)$/;"	v
theta_init	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^        theta_init = None$/;"	v
theta_init	Library Examples/3.main_EM_Watson.py	/^    theta_init = None$/;"	v
time	ECG mains/old/caca.py	/^import time$/;"	i
time	EM/EM_lib.py	/^import time$/;"	i
time	EM/HMM_lib.py	/^import time$/;"	i
time	libs/graph/GUI/graph_GUI_ad (copy).py	/^import time$/;"	i
time	libs/graph/graph_setting (copy).py	/^import time$/;"	i
time	libs/utilities_lib.py	/^import time$/;"	i
time_profiling	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    time_profiling = None$/;"	v
time_profiling	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    time_profiling = None$/;"	v
time_profiling	Library Examples/3.main_EM_Watson.py	/^    time_profiling = None$/;"	v
time_profiling	Library Examples/5.main_CV_Gaussian.py	/^    time_profiling = None$/;"	v
time_profiling	Library Examples/5.main_CV_Watson.py	/^    time_profiling = None$/;"	v
tol	ECG mains/old/main2.py	/^    tol = 0.000000001$/;"	v
total1	ECG mains/old/caca.py	/^    total1 = t1-t0$/;"	v
total2	ECG mains/old/caca.py	/^    total2 = t1-t0$/;"	v
tradingBarChart	libs/graph/graph_lib.py	/^    tradingBarChart = trgr.tradingBarChart$/;"	v	class:CGraph
tradingBarChart	libs/graph/specific/trading_graphs.py	/^def tradingBarChart(self, timeData, # X-Y points in the graph.$/;"	f
tradingCandleStickChart	libs/graph/graph_lib.py	/^    tradingCandleStickChart = trgr.tradingCandleStickChart$/;"	v	class:CGraph
tradingCandleStickChart	libs/graph/specific/trading_graphs.py	/^def tradingCandleStickChart(self, timeData, # X-Y points in the graph.$/;"	f
tradingLineChart	libs/graph/graph_lib.py	/^    tradingLineChart = trgr.tradingLineChart$/;"	v	class:CGraph
tradingLineChart	libs/graph/specific/trading_graphs.py	/^def tradingLineChart(self, timeData, seriesName = "Close", *args, **kwargs):         $/;"	f
tradingOcillator	libs/graph/graph_lib.py	/^    tradingOcillator = trgr.tradingOcillator$/;"	v	class:CGraph
tradingOcillator	libs/graph/specific/trading_graphs.py	/^def tradingOcillator(self, timeData, osc, osc_name = "OSC", ax = None, color_mode = 0,$/;"	f
tradingPV	libs/graph/graph_lib.py	/^    tradingPV = trgr.tradingPV$/;"	v	class:CGraph
tradingPV	libs/graph/specific/trading_graphs.py	/^def tradingPV(self, timeData, ax = None,$/;"	f
tradingPlatform	libs/graph/graph_lib.py	/^    tradingPlatform = trgr.tradingPlatform$/;"	v	class:CGraph
tradingPlatform	libs/graph/specific/trading_graphs.py	/^def tradingPlatform(self, timeData, MA1 = 26, MA2 = 12,$/;"	f
tradingVolume	libs/graph/graph_lib.py	/^    tradingVolume =  trgr.tradingVolume$/;"	v	class:CGraph
tradingVolume	libs/graph/specific/trading_graphs.py	/^def tradingVolume(self, timeData, seriesName = "Volume", # X-Y points in the graph.$/;"	f
train_test_split	ECG mains/2.main_Manu.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	ECG mains/old/6.main_data1 (copy).py	/^    from sklearn.model_selection import train_test_split$/;"	i
train_test_split	ECG mains/old/6.main_data1.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	ECG mains/old/7.main_system.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	Library Examples/5.main_CV_Gaussian.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	Library Examples/5.main_CV_Watson.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	utils/system_func.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	utils/system_modules.py	/^from sklearn.model_selection import train_test_split$/;"	i
trainscores	ECG mains/old/6.main_data2_noWatson.py	/^    trainscores = [gsvml.score(Xtrain,Ytrain),gsvmp.score(Xtrain,Ytrain),gsvmr.score(Xtrain,Ytrain)]$/;"	v
transform_time	libs/utilities_lib.py	/^def transform_time(time_formated):$/;"	f
tree	ECG mains/old/6.main_data2_noWatson.py	/^from sklearn import tree$/;"	i
tree	utils/system_modules.py	/^from sklearn import tree$/;"	i
trgr	libs/graph/graph_lib.py	/^import trading_graphs as trgr$/;"	i
trial_indices	ECG mains/old/6.main_data1 (copy).py	/^    trial_indices = mat["trial_indices"][0][0]  # Labels of the trials$/;"	v
trial_indices	ECG mains/old/6.main_data2.py	/^trial_indices = mat["trial_indices"][0][0]  # Labels of the trials$/;"	v
tsa	libs/graph/specific/graph_tsa.py	/^import VARMA as tsa$/;"	i
twin_axes	libs/graph/graph_axes.py	/^def twin_axes(self, ax = None):$/;"	f
twin_axes	libs/graph/graph_lib.py	/^    twin_axes = graxes.twin_axes$/;"	v	class:CGraph
twin_axes	libs/graph/graph_setting (copy).py	/^def twin_axes(self, ax = None):$/;"	f
type_file	libs/utilities_lib.py	/^def type_file(filedir):$/;"	f
ul	Distributions/Gaussian/Gaussian_distribution.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/Gaussian/Gaussian_estimators.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/Watson/Watson_distribution.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/Watson/Watson_estimators.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/Watson/Watson_estimators2.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/Watson/Watson_sampling.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/Watson/sampler_lib.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import utilities_lib as ul$/;"	i
ul	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import utilities_lib as ul$/;"	i
ul	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^import utilities_lib as ul$/;"	i
ul	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^import utilities_lib as ul$/;"	i
ul	Old Code/Watson_estimators (copy).py	/^import utilities_lib as ul$/;"	i
ul	libs/basicMathlib.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/GUI/graph_GUI.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/GUI/graph_GUI_ad (copy).py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/graph_3D.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/graph_advanced.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/graph_axis.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/graph_basic.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/graph_plots.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/graph_setting (copy).py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/graph_setting.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/specific/graph_tsa.py	/^import utilities_lib as ul$/;"	i
ul	libs/graph/specific/trading_graphs.py	/^import utilities_lib as ul$/;"	i
ul	libs/specific_plotting_func.py	/^import utilities_lib as ul$/;"	i
ul	utils/general_func.py	/^import utilities_lib as ul$/;"	i
update	libs/graph/GUI/graph_GUI.py	/^    def update(val):$/;"	f	function:pene
update_legend	libs/graph/graph_lib.py	/^    update_legend = grset.update_legend$/;"	v	class:CGraph
update_legend	libs/graph/graph_setting (copy).py	/^def update_legend(self, legend, NcY, loc = "best"):$/;"	f
update_legend	libs/graph/graph_setting.py	/^def update_legend(self, legend, NcY, ax = None, loc = "best"):$/;"	f
urllib2	libs/graph/GUI/graph_GUI_ad (copy).py	/^import urllib2$/;"	i
use_chageOfClusters	EM POO/CDistribution.py	/^    def use_chageOfClusters(theta_new, theta_prev):$/;"	m	class:CDistribution
vMF	vonMises/em_module.py	/^import vonMisesFisher as vMF$/;"	i
vMFd	EM POO/CDistribution.py	/^import vonMisesFisher_distribution as vMFd$/;"	i
vMFd	libs/specific_plotting_func.py	/^import vonMisesFisher_distribution as vMFd$/;"	i
vMFe	EM POO/CDistribution.py	/^import vonMisesFisher_estimators as vMFe$/;"	i
vMFe	libs/specific_plotting_func.py	/^import vonMisesFisher_estimators as vMFe$/;"	i
verbose	ECG mains/2.main_Manu.py	/^    verbose = 1;$/;"	v
verbose	ECG mains/2.main_Manu.py	/^    verbose = 2;$/;"	v
verbose	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^    verbose = 2;$/;"	v
verbose	ECG mains/old/6.main_data1 (copy).py	/^    verbose = 1$/;"	v
verbose	ECG mains/old/6.main_data1.py	/^                             verbose = verbose)$/;"	v
verbose	ECG mains/old/6.main_data2_noWatson.py	/^    verbose = 1$/;"	v
verbose	ECG mains/old/7.main_system.py	/^    verbose = 0$/;"	v
verbose	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    verbose = 1;$/;"	v
verbose	Library Examples/3.main_EM_Watson.py	/^    verbose = 1;$/;"	v
verbose	Library Examples/5.main_CV_Gaussian.py	/^    verbose = 1;$/;"	v
verbose	Library Examples/5.main_CV_Watson.py	/^    verbose = 1;$/;"	v
vonCV_EM	vonMises/em_module.py	/^def vonCV_EM(X,K_list,conditions,Ninits = 5):$/;"	f
vonCV_EM	vonMises/main.py	/^from em_module import EM,vonCV_EM$/;"	i
vonMisesFisher_K_pdf_log	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def vonMisesFisher_K_pdf_log (X, theta, Cs_log = None, parameters = None):$/;"	f
vonMisesFisher_d	ECG mains/2.main_Manu_Evolution_EM_HMM.py	/^vonMisesFisher_d = Cdist.CDistribution(name = "vonMisesFisher");$/;"	v
vonMisesFisher_d	Library Examples/3.main_EM_Gaussian_Watson_vonMisesFicher.py	/^    vonMisesFisher_d = Cdist.CDistribution(name = "vonMisesFisher");$/;"	v
vonMisesFisher_pdf_log	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^def vonMisesFisher_pdf_log(X, theta_k, Cs_log = None):$/;"	f
w	libs/utilities_lib.py	/^w = 10  # Width of the images$/;"	v
warnings	Distributions/Gaussian/Gaussian_distribution.py	/^import warnings$/;"	i
warnings	Distributions/Gaussian/Gaussian_estimators.py	/^import warnings$/;"	i
warnings	Distributions/Watson/Watson_distribution.py	/^import warnings$/;"	i
warnings	Distributions/Watson/Watson_estimators.py	/^import warnings$/;"	i
warnings	Distributions/vonMisesFisher/vonMisesFisher_distribution.py	/^import warnings$/;"	i
warnings	Distributions/vonMisesFisher/vonMisesFisher_estimators.py	/^import warnings$/;"	i
warnings	libs/graph/GUI/GUI_ex1.py	/^				import warnings		$/;"	i
warnings	libs/graph/specific/trading_graphs.py	/^import warnings$/;"	i
windowSample	libs/utilities_lib.py	/^def windowSample (sequence, L):$/;"	f
xData	libs/graph/GUI/GUI_ex1.py	/^	xData = np.linspace(0, 4*np.pi, 100)$/;"	v
yData1	libs/graph/GUI/GUI_ex1.py	/^	yData1 = np.cos(xData)$/;"	v
yData2	libs/graph/GUI/GUI_ex1.py	/^	yData2 = np.sin(xData)$/;"	v
y_test	ECG mains/old/6.main_data1.py	/^            y_test = [X_data_labels[iv] for iv in val_index]$/;"	v
y_train	ECG mains/old/6.main_data1.py	/^            y_train = [X_data_labels[itr] for itr in train_index]$/;"	v
yellows	libs/graph/trapyngColors.py	/^yellows = [$/;"	v
